{
  "openapi": "3.0.0",
  "info": {
    "title": "Travel App API Documentation",
    "description": "API documentation for Travel App",
    "contact": {
      "name": "Travel App API Support",
      "email": "info@travel-app.test"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://travelapp.prus.dev/",
      "description": "Travel App API Server"
    },
    {
      "url": "/api/v1"
    },
    {
      "url": "/api/v1"
    }
  ],
  "paths": {
    "/api/v1/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User login",
        "description": "Authenticate user and return access token",
        "operationId": "postAuthLogin",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "example": "password123"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Login successful"
                    },
                    "data": {
                      "properties": {
                        "access_token": {
                          "type": "string",
                          "example": "1|abc123..."
                        },
                        "token_type": {
                          "type": "string",
                          "example": "Bearer"
                        },
                        "user": {
                          "$ref": "#/components/schemas/User"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid credentials"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "The given data was invalid."
                    },
                    "errors": {
                      "properties": {
                        "email": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "The email field is required."
                          }
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/logout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User logout",
        "description": "Revoke the user's current access token",
        "operationId": "postAuthLogout",
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Logout successful"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthenticated"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "sanctum": []
          }
        ]
      }
    },
    "/api/v1/auth/me": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get current user",
        "description": "Get the authenticated user's profile information",
        "operationId": "getAuthMe",
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "User profile retrieved successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthenticated"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "sanctum": []
          }
        ]
      }
    },
    "/api/v1/categories": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get all categories",
        "description": "Returns a list of all travel categories",
        "operationId": "getCategories",
        "responses": {
          "200": {
            "description": "Categories retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": null
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Category"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/categories/{id}": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get a specific category",
        "description": "Returns details of a specific category",
        "operationId": "getCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Category ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": null
                    },
                    "data": {
                      "$ref": "#/components/schemas/Category"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Category not found"
                    },
                    "data": {
                      "type": "object",
                      "example": null
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/categories/{id}/places": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get places in a category",
        "description": "Returns a paginated list of places in the specified category",
        "operationId": "getCategoryPlaces",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Category ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 100,
              "minimum": 1
            }
          },
          {
            "name": "direction",
            "in": "query",
            "description": "Pagination direction",
            "required": false,
            "schema": {
              "type": "string",
              "default": "forward",
              "enum": [
                "forward",
                "backend"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "name",
              "enum": [
                "name",
                "name_desc",
                "created_at",
                "created_at_desc"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Places retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": null
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Place"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/PaginationLinks"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/categories/{id}/routes": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get routes in a category",
        "description": "Returns a paginated list of routes in the specified category",
        "operationId": "getCategoryRoutes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Category ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 100,
              "minimum": 1
            }
          },
          {
            "name": "direction",
            "in": "query",
            "description": "Pagination direction",
            "required": false,
            "schema": {
              "type": "string",
              "default": "forward",
              "enum": [
                "forward",
                "backend"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "name",
              "enum": [
                "name",
                "name_desc",
                "created_at",
                "created_at_desc",
                "rating",
                "rating_desc"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Routes retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": null
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Route"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/PaginationLinks"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/cities": {
      "get": {
        "tags": [
          "Cities"
        ],
        "summary": "Get cities list",
        "description": "Returns a paginated list of cities with filtering options. For non-admin users, only cities from active countries are returned.",
        "operationId": "getCities",
        "parameters": [
          {
            "name": "country_id",
            "in": "query",
            "description": "Filter by country ID",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 100,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cities retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Cities retrieved successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/City"
                      }
                    },
                    "pagination": {
                      "properties": {
                        "next_cursor": {
                          "type": "string",
                          "nullable": true
                        },
                        "previous_cursor": {
                          "type": "string",
                          "nullable": true
                        },
                        "has_next": {
                          "type": "boolean"
                        },
                        "has_previous": {
                          "type": "boolean"
                        },
                        "total": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/cities/{city}": {
      "get": {
        "tags": [
          "Cities"
        ],
        "summary": "Get city details",
        "description": "Returns details of a specific city by ID. For non-admin users, cities from inactive countries return a 404 error.",
        "operationId": "getCitiesCity",
        "parameters": [
          {
            "name": "city",
            "in": "path",
            "description": "City ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "City details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "City details retrieved successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/City"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "City not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "City not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/countries": {
      "get": {
        "tags": [
          "Countries"
        ],
        "summary": "Get countries list",
        "description": "Returns a paginated list of countries. For non-admin users, only active countries are returned.",
        "operationId": "getCountries",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 100,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Countries retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Countries retrieved successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Country"
                      }
                    },
                    "pagination": {
                      "properties": {
                        "next_cursor": {
                          "type": "string",
                          "nullable": true
                        },
                        "previous_cursor": {
                          "type": "string",
                          "nullable": true
                        },
                        "has_next": {
                          "type": "boolean"
                        },
                        "has_previous": {
                          "type": "boolean"
                        },
                        "total": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/countries/{country}": {
      "get": {
        "tags": [
          "Countries"
        ],
        "summary": "Get country details",
        "description": "Returns details of a specific country by ID. For non-admin users, inactive countries return a 404 error.",
        "operationId": "getCountriesCountry",
        "parameters": [
          {
            "name": "country",
            "in": "path",
            "description": "Country ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Country details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Country details retrieved successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Country"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Country not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Country not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/favorites": {
      "get": {
        "tags": [
          "Favorites"
        ],
        "summary": "Get user's favorite routes",
        "description": "Returns a paginated list of routes favorited by the authenticated user",
        "operationId": "getFavorites",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 100,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Favorites retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Favorites retrieved successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Route"
                      }
                    },
                    "pagination": {
                      "properties": {
                        "next_cursor": {
                          "type": "string",
                          "nullable": true
                        },
                        "previous_cursor": {
                          "type": "string",
                          "nullable": true
                        },
                        "has_next": {
                          "type": "boolean"
                        },
                        "has_previous": {
                          "type": "boolean"
                        },
                        "total": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthenticated"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "sanctum": []
          }
        ]
      }
    },
    "/api/v1/places": {
      "get": {
        "tags": [
          "Places"
        ],
        "summary": "Get places list",
        "description": "Returns a paginated list of places with filtering options. For non-admin users, only places from active countries are returned.",
        "operationId": "getPlaces",
        "parameters": [
          {
            "name": "city_id",
            "in": "query",
            "description": "Filter by city ID",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "category_id",
            "in": "query",
            "description": "Filter by category ID",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 100,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Places retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Places retrieved successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Place"
                      }
                    },
                    "pagination": {
                      "properties": {
                        "next_cursor": {
                          "type": "string",
                          "nullable": true
                        },
                        "previous_cursor": {
                          "type": "string",
                          "nullable": true
                        },
                        "has_next": {
                          "type": "boolean"
                        },
                        "has_previous": {
                          "type": "boolean"
                        },
                        "total": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Places"
        ],
        "summary": "Create a new place",
        "description": "Creates a new place (requires authentication)",
        "operationId": "postPlaces",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "city_id",
                  "category_id",
                  "latitude",
                  "longitude"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Central Park"
                  },
                  "address": {
                    "type": "string",
                    "example": "New York, NY 10024, USA",
                    "nullable": true
                  },
                  "contact_name": {
                    "type": "string",
                    "example": "John",
                    "nullable": true
                  },
                  "contact_surname": {
                    "type": "string",
                    "example": "Smith",
                    "nullable": true
                  },
                  "contact_phone": {
                    "type": "string",
                    "example": "+1-555-123-4567",
                    "nullable": true
                  },
                  "contact_email": {
                    "type": "string",
                    "format": "email",
                    "example": "contact@centralpark.com",
                    "nullable": true
                  },
                  "website": {
                    "type": "string",
                    "format": "url",
                    "example": "https://www.centralparknyc.org",
                    "nullable": true
                  },
                  "opening_hours": {
                    "type": "string",
                    "example": "Daily: 6:00 AM - 1:00 AM",
                    "nullable": true
                  },
                  "description": {
                    "type": "string",
                    "example": "A large public park in Manhattan",
                    "nullable": true
                  },
                  "city_id": {
                    "type": "integer",
                    "example": 1
                  },
                  "category_id": {
                    "type": "integer",
                    "example": 1
                  },
                  "latitude": {
                    "type": "number",
                    "format": "float",
                    "example": 40.785091
                  },
                  "longitude": {
                    "type": "number",
                    "format": "float",
                    "example": -73.968285
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Place created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Place created successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Place"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Validation failed"
                    },
                    "errors": {
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "sanctum": []
          }
        ]
      }
    },
    "/api/v1/places/{place}": {
      "get": {
        "tags": [
          "Places"
        ],
        "summary": "Get place details",
        "description": "Returns details of a specific place by ID. For non-admin users, places from inactive countries return a 404 error.",
        "operationId": "getPlacesPlace",
        "parameters": [
          {
            "name": "place",
            "in": "path",
            "description": "Place ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Place details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Place details retrieved successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Place"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Place not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Place not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Places"
        ],
        "summary": "Update a place",
        "description": "Updates an existing place (requires authentication and ownership or admin privileges)",
        "operationId": "putPlacesPlace",
        "parameters": [
          {
            "name": "place",
            "in": "path",
            "description": "Place ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "city_id",
                  "category_id",
                  "latitude",
                  "longitude"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Central Park"
                  },
                  "address": {
                    "type": "string",
                    "example": "New York, NY 10024, USA",
                    "nullable": true
                  },
                  "contact_name": {
                    "type": "string",
                    "example": "John",
                    "nullable": true
                  },
                  "contact_surname": {
                    "type": "string",
                    "example": "Smith",
                    "nullable": true
                  },
                  "contact_phone": {
                    "type": "string",
                    "example": "+1-555-123-4567",
                    "nullable": true
                  },
                  "contact_email": {
                    "type": "string",
                    "format": "email",
                    "example": "contact@centralpark.com",
                    "nullable": true
                  },
                  "website": {
                    "type": "string",
                    "format": "url",
                    "example": "https://www.centralparknyc.org",
                    "nullable": true
                  },
                  "opening_hours": {
                    "type": "string",
                    "example": "Daily: 6:00 AM - 1:00 AM",
                    "nullable": true
                  },
                  "description": {
                    "type": "string",
                    "example": "A large public park in Manhattan",
                    "nullable": true
                  },
                  "city_id": {
                    "type": "integer",
                    "example": 1
                  },
                  "category_id": {
                    "type": "integer",
                    "example": 1
                  },
                  "latitude": {
                    "type": "number",
                    "format": "float",
                    "example": 40.785091
                  },
                  "longitude": {
                    "type": "number",
                    "format": "float",
                    "example": -73.968285
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Place updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Place updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Place"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User can only update their own places",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "You can only update your own places"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Place not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Place not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "sanctum": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Places"
        ],
        "summary": "Delete a place",
        "description": "Deletes a place (requires authentication and ownership or admin privileges)",
        "operationId": "deletePlacesPlace",
        "parameters": [
          {
            "name": "place",
            "in": "path",
            "description": "Place ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Place deleted successfully"
          },
          "403": {
            "description": "Forbidden - User can only delete their own places",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "You can only delete your own places"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Place not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Place not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Cannot delete place with associated data",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Cannot delete place with associated data"
                    },
                    "errors": {
                      "properties": {
                        "has_geo_points": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "Cannot delete place with associated geo points"
                          }
                        },
                        "has_media": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "Cannot delete place with associated media"
                          }
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "sanctum": []
          }
        ]
      }
    },
    "/api/v1/places/{place}/routes": {
      "get": {
        "tags": [
          "Places"
        ],
        "summary": "Get routes for a place",
        "description": "Returns a paginated list of routes that include the specified place. For non-admin users, places from inactive countries return a 404 error.",
        "operationId": "getPlacesPlaceRoutes",
        "parameters": [
          {
            "name": "place",
            "in": "path",
            "description": "Place ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 100,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Place routes retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Place routes retrieved successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Route"
                      }
                    },
                    "pagination": {
                      "properties": {
                        "next_cursor": {
                          "type": "string",
                          "nullable": true
                        },
                        "previous_cursor": {
                          "type": "string",
                          "nullable": true
                        },
                        "has_next": {
                          "type": "boolean"
                        },
                        "has_previous": {
                          "type": "boolean"
                        },
                        "total": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Place not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Place not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ratings": {
      "get": {
        "tags": [
          "Ratings"
        ],
        "summary": "Get route ratings",
        "description": "Returns a paginated list of route ratings",
        "operationId": "getRatings",
        "parameters": [
          {
            "name": "route_id",
            "in": "query",
            "description": "Filter by route ID",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 100,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ratings retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Ratings retrieved successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "id": {
                            "type": "integer",
                            "example": 1
                          },
                          "rating": {
                            "type": "number",
                            "format": "float",
                            "example": 4.5
                          },
                          "comment": {
                            "type": "string",
                            "example": "Great route!",
                            "nullable": true
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "user": {
                            "$ref": "#/components/schemas/User"
                          },
                          "route": {
                            "$ref": "#/components/schemas/Route"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "pagination": {
                      "properties": {
                        "next_cursor": {
                          "type": "string",
                          "nullable": true
                        },
                        "previous_cursor": {
                          "type": "string",
                          "nullable": true
                        },
                        "has_next": {
                          "type": "boolean"
                        },
                        "has_previous": {
                          "type": "boolean"
                        },
                        "total": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/routes": {
      "get": {
        "tags": [
          "Routes"
        ],
        "summary": "Get routes list",
        "description": "Returns a paginated list of travel routes with filtering options. For non-admin users, only routes from active countries are returned.",
        "operationId": "getRoutes",
        "parameters": [
          {
            "name": "country_id",
            "in": "query",
            "description": "Filter by country ID",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "city_id",
            "in": "query",
            "description": "Filter by city ID",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "category_id",
            "in": "query",
            "description": "Filter by category ID",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "difficulty",
            "in": "query",
            "description": "Filter by difficulty level",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "easy",
                  "moderate",
                  "challenging",
                  "difficult"
                ]
              }
            }
          },
          {
            "name": "min_distance",
            "in": "query",
            "description": "Filter by minimum distance (km)",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "max_distance",
            "in": "query",
            "description": "Filter by maximum distance (km)",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "featured",
            "in": "query",
            "description": "Filter by featured status",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 100,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Routes retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Routes retrieved successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Route"
                      }
                    },
                    "pagination": {
                      "properties": {
                        "next_cursor": {
                          "type": "string",
                          "nullable": true
                        },
                        "previous_cursor": {
                          "type": "string",
                          "nullable": true
                        },
                        "has_next": {
                          "type": "boolean"
                        },
                        "has_previous": {
                          "type": "boolean"
                        },
                        "total": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/routes/featured": {
      "get": {
        "tags": [
          "Routes"
        ],
        "summary": "Get featured routes",
        "description": "Returns a paginated list of featured travel routes",
        "operationId": "getRoutesFeatured",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 100,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Featured routes retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Featured routes retrieved successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Route"
                      }
                    },
                    "pagination": {
                      "properties": {
                        "next_cursor": {
                          "type": "string",
                          "nullable": true
                        },
                        "previous_cursor": {
                          "type": "string",
                          "nullable": true
                        },
                        "has_next": {
                          "type": "boolean"
                        },
                        "has_previous": {
                          "type": "boolean"
                        },
                        "total": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/routes/{route}": {
      "get": {
        "tags": [
          "Routes"
        ],
        "summary": "Get route details",
        "description": "Returns details of a specific route by ID. For non-admin users, routes from inactive countries return a 404 error.",
        "operationId": "getRoutesRoute",
        "parameters": [
          {
            "name": "route",
            "in": "path",
            "description": "Route ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Route details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Route details retrieved successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Route"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Route not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Route not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/routes/{route}/places": {
      "get": {
        "tags": [
          "Routes"
        ],
        "summary": "Get places for a route",
        "description": "Returns a list of places included in the specified route",
        "operationId": "getRoutesRoutePlaces",
        "parameters": [
          {
            "name": "route",
            "in": "path",
            "description": "Route ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Route places retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Route places retrieved successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Place"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Route not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Route not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/routes/{route}/ratings": {
      "get": {
        "tags": [
          "Routes"
        ],
        "summary": "Get ratings for a route",
        "description": "Returns a paginated list of ratings for the specified route",
        "operationId": "getRoutesRouteRatings",
        "parameters": [
          {
            "name": "route",
            "in": "path",
            "description": "Route ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 100,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Route ratings retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Route ratings retrieved successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "id": {
                            "type": "integer",
                            "example": 1
                          },
                          "rating": {
                            "type": "number",
                            "format": "float",
                            "example": 4.5
                          },
                          "comment": {
                            "type": "string",
                            "example": "Great route!",
                            "nullable": true
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "user": {
                            "$ref": "#/components/schemas/User"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "pagination": {
                      "properties": {
                        "next_cursor": {
                          "type": "string",
                          "nullable": true
                        },
                        "previous_cursor": {
                          "type": "string",
                          "nullable": true
                        },
                        "has_next": {
                          "type": "boolean"
                        },
                        "has_previous": {
                          "type": "boolean"
                        },
                        "total": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Route not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Route not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/search": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Search across resources",
        "description": "Search for routes, places, cities, countries, and categories. For non-admin users, only resources from active countries are returned.",
        "operationId": "getSearch",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Search term",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 255,
              "minLength": 2
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Resource type to search",
            "required": false,
            "schema": {
              "type": "string",
              "default": "all",
              "enum": [
                "all",
                "routes",
                "places",
                "cities",
                "countries",
                "categories"
              ]
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 100,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search results retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Search results retrieved successfully"
                    },
                    "data": {
                      "properties": {
                        "query": {
                          "type": "string",
                          "example": "paris"
                        },
                        "type": {
                          "type": "string",
                          "example": "all"
                        },
                        "total_results": {
                          "type": "integer",
                          "example": 15
                        },
                        "results": {
                          "properties": {
                            "routes": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/Route"
                              }
                            },
                            "places": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/Place"
                              }
                            },
                            "cities": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/City"
                              }
                            },
                            "countries": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/Country"
                              }
                            },
                            "categories": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/Category"
                              }
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "pagination": {
                      "properties": {
                        "next_cursor": {
                          "type": "string",
                          "nullable": true
                        },
                        "previous_cursor": {
                          "type": "string",
                          "nullable": true
                        },
                        "has_next": {
                          "type": "boolean"
                        },
                        "has_previous": {
                          "type": "boolean"
                        },
                        "total": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "The given data was invalid."
                    },
                    "errors": {
                      "properties": {
                        "query": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "The query field is required."
                          }
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/search": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Search across multiple content types",
        "description": "Search routes, places, cities, countries, and categories with cursor-based pagination.\n *     The `type` parameter determines which content types to include in the search.\n *     Forward and backend pagination are fully supported for all resource types.\n *     Results are sorted by relevance, with most relevant items appearing first.",
        "operationId": "searchContent",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Search term",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of content to search for. Use 'all' to search across all content types.",
            "schema": {
              "type": "string",
              "default": "all",
              "enum": [
                "all",
                "routes",
                "places",
                "cities",
                "countries",
                "categories"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/direction"
          }
        ],
        "responses": {
          "200": {
            "description": "Search results with pagination metadata",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "query": {
                          "description": "The search term used",
                          "type": "string",
                          "example": "mountain"
                        },
                        "type": {
                          "description": "The content type that was searched",
                          "type": "string",
                          "example": "all"
                        },
                        "total_results": {
                          "description": "Total number of results across all types",
                          "type": "integer",
                          "example": 42
                        },
                        "results": {
                          "description": "Search results grouped by content type",
                          "properties": {
                            "routes": {
                              "description": "Routes matching the search criteria",
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/Route"
                              }
                            },
                            "places": {
                              "description": "Places matching the search criteria",
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/Place"
                              }
                            },
                            "cities": {
                              "description": "Cities matching the search criteria",
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/City"
                              }
                            },
                            "countries": {
                              "description": "Countries matching the search criteria",
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/Country"
                              }
                            },
                            "categories": {
                              "description": "Categories matching the search criteria",
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/Category"
                              }
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/PaginationLinks"
                    },
                    "meta": {
                      "properties": {
                        "request_id": {
                          "description": "Unique identifier for the request",
                          "type": "string",
                          "example": "550e8400-e29b-41d4-a716-446655440000"
                        },
                        "timestamp": {
                          "description": "ISO 8601 timestamp of when the response was generated",
                          "type": "string",
                          "format": "date-time",
                          "example": "2023-09-15T12:34:56+00:00"
                        },
                        "message": {
                          "description": "Success message",
                          "type": "string",
                          "example": "Search results retrieved successfully"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/favorites": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user's favorite routes",
        "description": "Returns a paginated list of routes favorited by the authenticated user",
        "operationId": "getUserFavorites",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 100,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User favorites retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "User favorites retrieved successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Route"
                      }
                    },
                    "pagination": {
                      "properties": {
                        "next_cursor": {
                          "type": "string",
                          "nullable": true
                        },
                        "previous_cursor": {
                          "type": "string",
                          "nullable": true
                        },
                        "has_next": {
                          "type": "boolean"
                        },
                        "has_previous": {
                          "type": "boolean"
                        },
                        "total": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthenticated"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "sanctum": []
          }
        ]
      }
    },
    "/api/v1/user/ratings": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user's route ratings",
        "description": "Returns a paginated list of routes rated by the authenticated user",
        "operationId": "getUserRatings",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 100,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User ratings retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "User ratings retrieved successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "rating": {
                            "type": "number",
                            "format": "float",
                            "example": 4.5
                          },
                          "comment": {
                            "type": "string",
                            "example": "Great route!",
                            "nullable": true
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "route": {
                            "$ref": "#/components/schemas/Route"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "pagination": {
                      "properties": {
                        "next_cursor": {
                          "type": "string",
                          "nullable": true
                        },
                        "previous_cursor": {
                          "type": "string",
                          "nullable": true
                        },
                        "has_next": {
                          "type": "boolean"
                        },
                        "has_previous": {
                          "type": "boolean"
                        },
                        "total": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthenticated"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "sanctum": []
          }
        ]
      }
    },
    "/api/v1/user/profile": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user profile",
        "description": "Returns the authenticated user's complete profile information including personal fields",
        "operationId": "getUserProfile",
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "User profile retrieved successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthenticated"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "sanctum": []
          }
        ]
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update user profile",
        "description": "Updates the authenticated user's profile information including personal fields",
        "operationId": "putUserProfile",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "John"
                  },
                  "surname": {
                    "type": "string",
                    "example": "Doe",
                    "nullable": true
                  },
                  "birth_year": {
                    "type": "integer",
                    "example": 1990,
                    "nullable": true
                  },
                  "birth_month": {
                    "type": "integer",
                    "example": 5,
                    "nullable": true
                  },
                  "birth_day": {
                    "type": "integer",
                    "example": 15,
                    "nullable": true
                  },
                  "address": {
                    "type": "string",
                    "example": "123 Main Street, New York, NY 10001",
                    "nullable": true
                  },
                  "phone_number": {
                    "type": "string",
                    "example": "+1-555-123-4567",
                    "nullable": true
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Profile updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthenticated"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "The given data was invalid."
                    },
                    "errors": {
                      "properties": {
                        "name": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "The name field is required."
                          }
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "sanctum": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "PaginationResponse": {
        "description": "Standard pagination response format",
        "properties": {
          "pagination": {
            "properties": {
              "next_cursor": {
                "description": "Opaque cursor string for the next page",
                "type": "string",
                "example": "ZXlKMllXeDFaU0k2TVRBd0xDSnBaQ0k2TXpBd0xDSmxlSEJwY21WelgyRjBJam9pTWpBeU5DMHdPQzB6TUZRd05qb3hOam94TlM0eU5URnZklbQ==",
                "nullable": true
              },
              "previous_cursor": {
                "description": "Opaque cursor string for the previous page",
                "type": "string",
                "example": "ZXlKMllXeDFaU0k2TVRBd0xDSnBaQ0k2TXpBd0xDSmxlSEJwY21WelgyRjBJam9pTWpBeU5DMHdPQzB6TUZRd05qb3hOam94TlM0eU5URnAzaQ==",
                "nullable": true
              },
              "has_next": {
                "description": "Whether there is a next page available",
                "type": "boolean",
                "example": true
              },
              "has_previous": {
                "description": "Whether there is a previous page available",
                "type": "boolean",
                "example": false
              },
              "total": {
                "description": "Total number of items",
                "type": "integer",
                "example": 50
              },
              "limit": {
                "description": "Maximum items per page",
                "type": "integer",
                "example": 20
              },
              "error": {
                "description": "Error information if there was a problem with the cursor",
                "properties": {
                  "code": {
                    "description": "Error code",
                    "type": "string",
                    "example": "invalid_cursor"
                  },
                  "message": {
                    "description": "Human-readable error message",
                    "type": "string",
                    "example": "The provided cursor is invalid or has expired"
                  }
                },
                "type": "object",
                "nullable": true
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "Route": {
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Historical Paris Tour"
          },
          "description": {
            "type": "string",
            "example": "A walking tour through Paris's most historic sites"
          },
          "city_id": {
            "type": "integer",
            "example": 1
          },
          "user_id": {
            "type": "integer",
            "example": 1
          },
          "duration": {
            "description": "Duration in minutes",
            "type": "integer",
            "example": 180
          },
          "distance": {
            "description": "Distance in kilometers",
            "type": "number",
            "format": "float",
            "example": 5.2
          },
          "elevation": {
            "description": "Elevation gain in meters",
            "type": "integer",
            "example": 50
          },
          "difficulty": {
            "type": "string",
            "enum": [
              "easy",
              "moderate",
              "challenging",
              "difficult"
            ],
            "example": "moderate"
          },
          "is_featured": {
            "type": "boolean",
            "example": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "city": {
            "properties": {
              "id": {
                "type": "integer",
                "example": 1
              },
              "name": {
                "type": "string",
                "example": "Paris"
              },
              "country": {
                "type": "object"
              }
            },
            "type": "object"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "media": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "ratings_avg": {
            "type": "number",
            "format": "float",
            "example": 4.5
          },
          "ratings_count": {
            "type": "integer",
            "example": 24
          }
        },
        "type": "object"
      },
      "PaginationRequest": {
        "description": "Pagination parameters for requests",
        "properties": {
          "cursor": {
            "description": "Opaque Base64-encoded string that points to a specific item in the result set. Valid for 30 minutes after generation. Do not modify or decode this value.",
            "type": "string",
            "example": "eyJ2YWx1ZSI6MTY4MzI0MDAwMCwiaWQiOjQyLCJleHBpcmVzX2F0IjoiMjAyNC0wMS0xNVQxMjozMDowMFoifQ=="
          },
          "limit": {
            "description": "Maximum number of items per page (default: 20, max: 100)",
            "type": "integer",
            "default": 20,
            "example": 20
          },
          "direction": {
            "description": "Direction of pagination. Use 'forward' for next page or 'backend' to navigate to previous page.",
            "type": "string",
            "default": "forward",
            "enum": [
              "forward",
              "backend"
            ],
            "example": "forward"
          }
        },
        "type": "object"
      },
      "PaginationLinks": {
        "description": "Pagination metadata for navigating between pages",
        "properties": {
          "next_cursor": {
            "description": "Cursor for the next page of results. Valid for 30 minutes after generation. Will be null if there are no more results.",
            "type": "string",
            "example": "eyJ2YWx1ZSI6MTY4MzI0MDAwMCwiaWQiOjQyLCJleHBpcmVzX2F0IjoiMjAyNC0wMS0xNVQxMjozMDowMFoifQ==",
            "nullable": true
          },
          "previous_cursor": {
            "description": "Cursor for the previous page of results. Valid for 30 minutes after generation. Will be null if this is the first page.",
            "type": "string",
            "example": "eyJ2YWx1ZSI6MTY4MzIzOTUwMCwiaWQiOjM4LCJleHBpcmVzX2F0IjoiMjAyNC0wMS0xNVQxMjozMDowMFoifQ==",
            "nullable": true
          },
          "has_next": {
            "description": "Whether there is a next page of results. Use with next_cursor for forward pagination.",
            "type": "boolean",
            "example": true
          },
          "has_previous": {
            "description": "Whether there is a previous page of results. Use with previous_cursor for backend pagination.",
            "type": "boolean",
            "example": false
          },
          "total": {
            "description": "Total number of items matching the query",
            "type": "integer",
            "example": 150
          },
          "limit": {
            "description": "Maximum number of items per page used for this request",
            "type": "integer",
            "example": 20
          }
        },
        "type": "object"
      },
      "PaginatedResponse": {
        "properties": {
          "data": {
            "description": "Array of items",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationLinks"
          },
          "meta": {
            "properties": {
              "request_id": {
                "description": "Unique identifier for the request",
                "type": "string",
                "example": "550e8400-e29b-41d4-a716-446655440000"
              },
              "timestamp": {
                "description": "ISO 8601 timestamp of when the response was generated",
                "type": "string",
                "format": "date-time",
                "example": "2023-09-15T12:34:56+00:00"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "ErrorResponse": {
        "description": "Standard error response format",
        "properties": {
          "error": {
            "properties": {
              "code": {
                "description": "Error code",
                "type": "string",
                "example": "validation_error"
              },
              "message": {
                "description": "Human-readable error message",
                "type": "string",
                "example": "The provided data failed validation"
              },
              "details": {
                "description": "Additional error details",
                "type": "object",
                "nullable": true
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "User": {
        "description": "User model with personal information",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "John"
          },
          "surname": {
            "type": "string",
            "example": "Doe",
            "nullable": true
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "birth_year": {
            "type": "integer",
            "example": 1990,
            "nullable": true
          },
          "birth_month": {
            "type": "integer",
            "example": 5,
            "nullable": true
          },
          "birth_day": {
            "type": "integer",
            "example": 15,
            "nullable": true
          },
          "address": {
            "type": "string",
            "example": "123 Main Street, New York, NY 10001",
            "nullable": true
          },
          "phone_number": {
            "type": "string",
            "example": "+1-555-123-4567",
            "nullable": true
          },
          "is_admin": {
            "type": "boolean",
            "example": false
          },
          "profile_image": {
            "type": "string",
            "example": "users/profile1.jpg",
            "nullable": true
          },
          "full_name": {
            "description": "Computed full name",
            "type": "string",
            "example": "John Doe"
          },
          "birth_date": {
            "description": "Computed birth date",
            "type": "string",
            "format": "date",
            "example": "1990-05-15",
            "nullable": true
          },
          "age": {
            "description": "Computed age",
            "type": "integer",
            "example": 33,
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "Country": {
        "description": "Country model",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "United States"
          },
          "code": {
            "type": "string",
            "example": "US"
          },
          "is_active": {
            "type": "boolean",
            "example": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "City": {
        "description": "City model",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "New York"
          },
          "country_id": {
            "type": "integer",
            "example": 1
          },
          "latitude": {
            "type": "number",
            "format": "float",
            "example": 40.7128
          },
          "longitude": {
            "type": "number",
            "format": "float",
            "example": -74.006
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          }
        },
        "type": "object"
      },
      "Category": {
        "description": "Category model",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Restaurants"
          },
          "description": {
            "type": "string",
            "example": "Places to eat",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "example": "restaurant",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "Place": {
        "description": "Place model with contact information",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Central Park"
          },
          "description": {
            "type": "string",
            "example": "A large public park",
            "nullable": true
          },
          "city_id": {
            "type": "integer",
            "example": 1
          },
          "category_id": {
            "type": "integer",
            "example": 1
          },
          "latitude": {
            "type": "number",
            "format": "float",
            "example": 40.7829
          },
          "longitude": {
            "type": "number",
            "format": "float",
            "example": -73.9654
          },
          "address": {
            "type": "string",
            "example": "New York, NY 10024",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "example": "+1-212-310-6600",
            "nullable": true
          },
          "website": {
            "type": "string",
            "example": "https://www.centralparknyc.org",
            "nullable": true
          },
          "contact_name": {
            "type": "string",
            "example": "John",
            "nullable": true
          },
          "contact_surname": {
            "type": "string",
            "example": "Smith",
            "nullable": true
          },
          "contact_phone": {
            "type": "string",
            "example": "+1-555-123-4567",
            "nullable": true
          },
          "contact_email": {
            "type": "string",
            "format": "email",
            "example": "contact@centralpark.org",
            "nullable": true
          },
          "opening_hours": {
            "type": "string",
            "example": "6:00 AM - 1:00 AM daily",
            "nullable": true
          },
          "image_path": {
            "type": "string",
            "example": "places/central-park.jpg",
            "nullable": true
          },
          "is_published": {
            "type": "boolean",
            "example": true
          },
          "full_contact_name": {
            "description": "Computed full contact name",
            "type": "string",
            "example": "John Smith",
            "nullable": true
          },
          "has_contact_info": {
            "description": "Whether place has contact information",
            "type": "boolean",
            "example": true
          },
          "formatted_website": {
            "description": "Formatted website URL",
            "type": "string",
            "example": "https://www.centralparknyc.org",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "city": {
            "$ref": "#/components/schemas/City"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          }
        },
        "type": "object"
      },
      "Rating": {
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "user_id": {
            "type": "integer",
            "example": 1
          },
          "route_id": {
            "type": "integer",
            "example": 1
          },
          "rating": {
            "description": "Rating value from 1 to 5",
            "type": "integer",
            "example": 4
          },
          "comment": {
            "type": "string",
            "example": "Great route with beautiful views!",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "route": {
            "$ref": "#/components/schemas/Route"
          }
        },
        "type": "object"
      },
      "GeoPoint": {
        "required": [
          "id",
          "route_id",
          "latitude",
          "longitude"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "route_id": {
            "type": "integer",
            "format": "int64"
          },
          "place_id": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "latitude": {
            "type": "number",
            "format": "float"
          },
          "longitude": {
            "type": "number",
            "format": "float"
          },
          "elevation": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "default": 0
          },
          "type": {
            "type": "string",
            "default": "waypoint"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "image_path": {
            "type": "string",
            "nullable": true
          },
          "audio_path": {
            "type": "string",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "CursorPagination": {
        "properties": {
          "next_cursor": {
            "type": "string",
            "nullable": true
          },
          "previous_cursor": {
            "type": "string",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "has_previous": {
            "type": "boolean"
          },
          "total": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Meta": {
        "properties": {
          "request_id": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "ApiStandardResponse": {
        "properties": {
          "data": {
            "description": "The main data payload",
            "type": "object"
          },
          "meta": {
            "properties": {
              "request_id": {
                "type": "string",
                "example": "550e8400-e29b-41d4-a716-446655440000"
              },
              "timestamp": {
                "type": "string",
                "format": "date-time",
                "example": "2023-04-01T12:00:00+00:00"
              },
              "message": {
                "type": "string",
                "example": "Operation completed successfully",
                "nullable": true
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "ApiPaginatedResponse": {
        "properties": {
          "data": {
            "description": "The main data payload",
            "type": "object"
          },
          "pagination": {
            "properties": {
              "next_cursor": {
                "type": "string",
                "example": "eyJwb3NpdGlvbiI6MjAsImV4cGlyZXNfYXQiOiIyMDIzLTA5LTAxVDEyOjAwOjAwKzAwMDAifQ==",
                "nullable": true
              },
              "previous_cursor": {
                "type": "string",
                "example": "eyJwb3NpdGlvbiI6MCwiZXhwaXJlc19hdCI6IjIwMjMtMDktMDFUMTI6MDA6MDArMDAwMCJ9",
                "nullable": true
              },
              "has_next": {
                "type": "boolean",
                "example": true
              },
              "has_previous": {
                "type": "boolean",
                "example": false
              },
              "total": {
                "type": "integer",
                "example": 42
              },
              "limit": {
                "type": "integer",
                "example": 20
              }
            },
            "type": "object"
          },
          "meta": {
            "properties": {
              "request_id": {
                "type": "string",
                "example": "550e8400-e29b-41d4-a716-446655440000"
              },
              "timestamp": {
                "type": "string",
                "format": "date-time",
                "example": "2023-04-01T12:00:00+00:00"
              },
              "message": {
                "type": "string",
                "example": "Data retrieved successfully",
                "nullable": true
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "ApiErrorResponse": {
        "properties": {
          "error": {
            "properties": {
              "code": {
                "type": "string",
                "example": "validation_error"
              },
              "message": {
                "type": "string",
                "example": "The provided data was invalid"
              },
              "details": {
                "type": "object",
                "nullable": true
              }
            },
            "type": "object"
          },
          "meta": {
            "properties": {
              "request_id": {
                "type": "string",
                "example": "550e8400-e29b-41d4-a716-446655440000"
              },
              "timestamp": {
                "type": "string",
                "format": "date-time",
                "example": "2023-04-01T12:00:00+00:00"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "CursorPaginationResponse": {
        "description": "Standard cursor pagination response format",
        "properties": {
          "pagination": {
            "properties": {
              "next_cursor": {
                "description": "Opaque cursor string for the next page",
                "type": "string",
                "example": "ZXlKMllXeDFaU0k2TVRBd0xDSnBaQ0k2TXpBd0xDSmxlSEJwY21WelgyRjBJam9pTWpBeU5DMHdPQzB6TUZRd05qb3hOam94TlM0eU5URnZklbQ==",
                "nullable": true
              },
              "previous_cursor": {
                "description": "Opaque cursor string for the previous page",
                "type": "string",
                "example": "ZXlKMllXeDFaU0k2TVRBd0xDSnBaQ0k2TXpBd0xDSmxlSEJwY21WelgyRjBJam9pTWpBeU5DMHdPQzB6TUZRd05qb3hOam94TlM0eU5URnAzaQ==",
                "nullable": true
              },
              "has_next": {
                "description": "Whether there is a next page available",
                "type": "boolean",
                "example": true
              },
              "has_previous": {
                "description": "Whether there is a previous page available",
                "type": "boolean",
                "example": false
              },
              "total": {
                "description": "Total number of items",
                "type": "integer",
                "example": 50
              },
              "limit": {
                "description": "Maximum items per page",
                "type": "integer",
                "example": 20
              },
              "error": {
                "description": "Error information if there was a problem with the cursor",
                "properties": {
                  "code": {
                    "description": "Error code",
                    "type": "string",
                    "example": "invalid_cursor"
                  },
                  "message": {
                    "description": "Human-readable error message",
                    "type": "string",
                    "example": "The provided cursor is invalid or has expired"
                  }
                },
                "type": "object",
                "nullable": true
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      }
    },
    "responses": {
      "PaginatedResponse": {
        "description": "Paginated list of items",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PaginatedResponse"
            }
          }
        }
      },
      "UnauthorizedError": {
        "description": "Authentication is required",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "ValidationError": {
        "description": "Validation failed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "InvalidCursorError": {
        "description": "Invalid or expired cursor",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "error": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_cursor"
                    },
                    "message": {
                      "type": "string",
                      "example": "The provided cursor is invalid or has expired. Please restart from the beginning."
                    },
                    "details": {
                      "type": "object",
                      "nullable": true
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          }
        }
      }
    },
    "parameters": {
      "cursor": {
        "name": "cursor",
        "in": "query",
        "description": "Opaque cursor string for pagination. For forward pagination, use the next_cursor from previous response. For backend pagination, use the previous_cursor.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "Number of items per page (default: 20, max: 100)",
        "required": false,
        "schema": {
          "type": "integer",
          "default": 20,
          "maximum": 100,
          "minimum": 1
        }
      },
      "direction": {
        "name": "direction",
        "in": "query",
        "description": "Pagination direction. Use 'forward' for getting the next page, 'backend' for returning to previous pages.",
        "required": false,
        "schema": {
          "type": "string",
          "default": "forward",
          "enum": [
            "forward",
            "backend"
          ]
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "bearerFormat": "JWT",
        "scheme": "bearer"
      },
      "sanctum": {
        "type": "apiKey",
        "description": "Enter token in format (Bearer <token>)",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "API Endpoints for user authentication"
    },
    {
      "name": "Cities",
      "description": "API Endpoints for cities"
    },
    {
      "name": "Countries",
      "description": "API Endpoints for countries"
    },
    {
      "name": "Favorites",
      "description": "API Endpoints for user favorites"
    },
    {
      "name": "Places",
      "description": "API Endpoints for places"
    },
    {
      "name": "Ratings",
      "description": "API Endpoints for user ratings"
    },
    {
      "name": "Search",
      "description": "API Endpoints for search functionality"
    },
    {
      "name": "Categories",
      "description": "API Endpoints for travel categories"
    },
    {
      "name": "Routes",
      "description": "API Endpoints for travel routes"
    },
    {
      "name": "User",
      "description": "User profile and activity endpoints for mobile app"
    }
  ],
  "security": [
    {
      "sanctum": []
    }
  ]
}