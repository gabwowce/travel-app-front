{
    "openapi": "3.0.0",
    "info": {
        "title": "Travel App API Documentation",
        "description": "API documentation for Travel App",
        "contact": {
            "name": "Travel App API Support",
            "email": "info@travel-app.test"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "https://travelapp.prus.dev/",
            "description": "Travel App API Server"
        },
        {
            "url": "/api/v1"
        },
        {
            "url": "/api/v1"
        }
    ],
    "paths": {
        "/api/v1/auth/register": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user",
                "description": "Register a new user account and receive an authentication token",
                "operationId": "registerUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegisterRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "The email has already been taken."
                                        },
                                        "data": {
                                            "type": "object",
                                            "example": null
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/login": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "User login",
                "description": "Authenticates a user and issues a token",
                "operationId": "loginUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoginRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User logged in successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "User logged in successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "user": {
                                                    "$ref": "#/components/schemas/UserResponse"
                                                },
                                                "token": {
                                                    "type": "string",
                                                    "example": "1|laravel_sanctum_Xe2BT9..."
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid credentials"
                                        },
                                        "data": {
                                            "type": "object",
                                            "example": null
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/logout": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Logout user",
                "description": "Logout user and invalidate token",
                "operationId": "logoutUser",
                "responses": {
                    "200": {
                        "description": "Logged out successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Logged out successfully"
                                        },
                                        "data": {
                                            "type": "object",
                                            "example": null
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        },
                                        "data": {
                                            "type": "object",
                                            "example": null
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/auth/me": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Get current user info",
                "description": "Returns information about the authenticated user",
                "operationId": "getCurrentUser",
                "responses": {
                    "200": {
                        "description": "User information retrieved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": null
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "example": "John Doe"
                                                },
                                                "email": {
                                                    "type": "string",
                                                    "example": "user@example.com"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        },
                                        "data": {
                                            "type": "object",
                                            "example": null
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/categories": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get all categories",
                "description": "Returns a list of all travel categories",
                "operationId": "getCategories",
                "responses": {
                    "200": {
                        "description": "List of categories",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Categories retrieved successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Category"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Categories"
                ],
                "summary": "Create a new category",
                "description": "Creates a new travel category (admin only)",
                "operationId": "storeCategory",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CategoryRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Category created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Category created successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/Category"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "The name has already been taken."
                                        },
                                        "data": {
                                            "type": "object",
                                            "example": null
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        },
                                        "data": {
                                            "type": "object",
                                            "example": null
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - Not an admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Access denied"
                                        },
                                        "data": {
                                            "type": "object",
                                            "example": null
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/categories/{category}": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get a specific category",
                "description": "Returns details of a specific category by ID or slug",
                "operationId": "getCategoryById",
                "parameters": [
                    {
                        "name": "category",
                        "in": "path",
                        "description": "Category ID or slug",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Category details retrieved successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/Category"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Category not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Category not found"
                                        },
                                        "data": {
                                            "type": "object",
                                            "example": null
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Categories"
                ],
                "summary": "Update a category",
                "description": "Updates a category's information (admin only)",
                "operationId": "updateCategory",
                "parameters": [
                    {
                        "name": "category",
                        "in": "path",
                        "description": "Category ID or slug",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CategoryRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Category updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Category updated successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/Category"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Category not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Category not found"
                                        },
                                        "data": {
                                            "type": "object",
                                            "example": null
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "The name has already been taken."
                                        },
                                        "data": {
                                            "type": "object",
                                            "example": null
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Categories"
                ],
                "summary": "Delete a category",
                "description": "Deletes a category if it has no associated places or routes (admin only)",
                "operationId": "deleteCategory",
                "parameters": [
                    {
                        "name": "category",
                        "in": "path",
                        "description": "Category ID or slug",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Category deleted successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "example": []
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Cannot delete - has associated data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Cannot delete this category because it has associated data"
                                        },
                                        "data": {
                                            "properties": {
                                                "places_count": {
                                                    "type": "integer",
                                                    "example": 5
                                                },
                                                "routes_count": {
                                                    "type": "integer",
                                                    "example": 3
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Category not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Category not found"
                                        },
                                        "data": {
                                            "type": "object",
                                            "example": null
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/categories/{category}/places": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get places in a category",
                "description": "Returns a paginated list of places associated with a category",
                "operationId": "getCategoryPlaces",
                "parameters": [
                    {
                        "name": "category",
                        "in": "path",
                        "description": "Category ID or slug",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cursor",
                        "in": "query",
                        "description": "Cursor for pagination",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "direction",
                        "in": "query",
                        "description": "Pagination direction",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "forward",
                            "enum": [
                                "forward",
                                "backend"
                            ]
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "name",
                            "enum": [
                                "name",
                                "name_desc",
                                "created_at",
                                "created_at_desc"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Results per page (DEPRECATED - use limit instead)",
                        "required": false,
                        "deprecated": true,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number (DEPRECATED - use cursor instead)",
                        "required": false,
                        "deprecated": true,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of places in the category",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Category places retrieved successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        },
                                        "pagination": {
                                            "properties": {
                                                "next_cursor": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "previous_cursor": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "has_next": {
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "has_previous": {
                                                    "type": "boolean",
                                                    "example": false
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "example": 25
                                                },
                                                "limit": {
                                                    "type": "integer",
                                                    "example": 20
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Category not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "not_found"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Category not found"
                                                },
                                                "details": {
                                                    "type": "object",
                                                    "nullable": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/categories/{category}/routes": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get routes in a category",
                "description": "Returns a paginated list of routes associated with a category",
                "operationId": "getCategoryRoutes",
                "parameters": [
                    {
                        "name": "category",
                        "in": "path",
                        "description": "Category ID or slug",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cursor",
                        "in": "query",
                        "description": "Cursor for pagination",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "direction",
                        "in": "query",
                        "description": "Pagination direction",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "forward",
                            "enum": [
                                "forward",
                                "backend"
                            ]
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "name",
                            "enum": [
                                "name",
                                "name_desc",
                                "created_at",
                                "created_at_desc",
                                "rating",
                                "rating_desc"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Results per page (DEPRECATED - use limit instead)",
                        "required": false,
                        "deprecated": true,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number (DEPRECATED - use cursor instead)",
                        "required": false,
                        "deprecated": true,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of routes in the category",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Category routes retrieved successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        },
                                        "pagination": {
                                            "properties": {
                                                "next_cursor": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "previous_cursor": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "has_next": {
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "has_previous": {
                                                    "type": "boolean",
                                                    "example": false
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "example": 25
                                                },
                                                "limit": {
                                                    "type": "integer",
                                                    "example": 20
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Category not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "not_found"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Category not found"
                                                },
                                                "details": {
                                                    "type": "object",
                                                    "nullable": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/cities": {
            "get": {
                "tags": [
                    "Cities"
                ],
                "summary": "Get all cities",
                "description": "Returns a list of cities with optional filtering by country. For regular users, only cities from active countries are returned.",
                "operationId": "getCities",
                "parameters": [
                    {
                        "name": "country_id",
                        "in": "query",
                        "description": "Filter cities by country ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of cities",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Cities retrieved successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/City"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Cities"
                ],
                "summary": "Create a new city",
                "description": "Creates a new city (admin only)",
                "operationId": "storeCity",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CityRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "City created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "City created successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/City"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "name": [
                                                    "The name field is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/cities/{city}": {
            "get": {
                "tags": [
                    "Cities"
                ],
                "summary": "Get city details",
                "description": "Returns details of a specific city including its routes",
                "operationId": "getCityById",
                "parameters": [
                    {
                        "name": "city",
                        "in": "path",
                        "description": "City ID or slug",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "City details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "City details retrieved successfully"
                                        },
                                        "data": {
                                            "type": "object",
                                            "allOf": [
                                                {
                                                    "$ref": "#/components/schemas/City"
                                                },
                                                {
                                                    "properties": {
                                                        "routes": {
                                                            "type": "array",
                                                            "items": {
                                                                "$ref": "#/components/schemas/Route"
                                                            }
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "City not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "City not found"
                                        },
                                        "data": {
                                            "type": "object",
                                            "example": null
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Cities"
                ],
                "summary": "Update a city",
                "description": "Updates an existing city (admin only)",
                "operationId": "updateCity",
                "parameters": [
                    {
                        "name": "city",
                        "in": "path",
                        "description": "City ID or slug",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CityRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "City updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "City updated successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/City"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "City not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "City not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "name": [
                                                    "The name field is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Cities"
                ],
                "summary": "Delete a city",
                "description": "Deletes a city if it has no associated routes or places (admin only)",
                "operationId": "deleteCity",
                "parameters": [
                    {
                        "name": "city",
                        "in": "path",
                        "description": "City ID or slug",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "City deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "City deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Cannot delete city with dependencies",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Cannot delete city with associated routes or places"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "City not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "City not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/cities/{city}/routes": {
            "get": {
                "tags": [
                    "Cities"
                ],
                "summary": "Get routes in a city",
                "description": "Returns a paginated list of routes in a specific city",
                "operationId": "getCityRoutes",
                "parameters": [
                    {
                        "name": "city",
                        "in": "path",
                        "description": "City ID or slug",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cursor",
                        "in": "query",
                        "description": "Cursor for pagination",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "direction",
                        "in": "query",
                        "description": "Pagination direction",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "forward",
                            "enum": [
                                "forward",
                                "backend"
                            ]
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "created_at_desc",
                            "enum": [
                                "name",
                                "name_desc",
                                "created_at",
                                "created_at_desc"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Results per page (DEPRECATED - use limit instead)",
                        "required": false,
                        "deprecated": true,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number (DEPRECATED - use cursor instead)",
                        "required": false,
                        "deprecated": true,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of routes",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "City routes retrieved successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Route"
                                            }
                                        },
                                        "pagination": {
                                            "properties": {
                                                "next_cursor": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "previous_cursor": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "has_next": {
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "has_previous": {
                                                    "type": "boolean",
                                                    "example": false
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "example": 25
                                                },
                                                "limit": {
                                                    "type": "integer",
                                                    "example": 20
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "City not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "not_found"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "City not found"
                                                },
                                                "details": {
                                                    "type": "object",
                                                    "nullable": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/cities/{city}/places": {
            "get": {
                "tags": [
                    "Cities"
                ],
                "summary": "Get places in a city",
                "description": "Returns a list of places in a specific city",
                "operationId": "getCityPlaces",
                "parameters": [
                    {
                        "name": "city",
                        "in": "path",
                        "description": "City ID or slug",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of places",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "City places retrieved successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Place"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "City not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "City not found"
                                        },
                                        "data": {
                                            "type": "object",
                                            "example": null
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/countries": {
            "get": {
                "tags": [
                    "Countries"
                ],
                "summary": "Get all countries",
                "description": "Returns a list of countries with city and route counts. For regular users, only active countries are returned.",
                "operationId": "getCountries",
                "responses": {
                    "200": {
                        "description": "List of countries",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Countries retrieved successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Country"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/countries/{country}": {
            "get": {
                "tags": [
                    "Countries"
                ],
                "summary": "Get country details",
                "description": "Returns details of a specific country including its cities. For non-admin users, only active countries are accessible.",
                "operationId": "getCountryById",
                "parameters": [
                    {
                        "name": "country",
                        "in": "path",
                        "description": "Country ID or code",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Country details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Country details retrieved successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/CountryWithCities"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Country not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Country not found"
                                        },
                                        "data": {
                                            "type": "object",
                                            "example": null
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/countries/{country}/cities": {
            "get": {
                "tags": [
                    "Countries"
                ],
                "summary": "Get cities in a country",
                "description": "Returns cities in a specific country with route counts. For non-admin users, only cities from active countries are returned.",
                "operationId": "getCountryCities",
                "parameters": [
                    {
                        "name": "country",
                        "in": "path",
                        "description": "Country ID or code",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cursor",
                        "in": "query",
                        "description": "Cursor for pagination",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "direction",
                        "in": "query",
                        "description": "Pagination direction",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "forward",
                            "enum": [
                                "forward",
                                "backend"
                            ]
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "name",
                            "enum": [
                                "name",
                                "name_desc",
                                "routes_count",
                                "routes_count_desc"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of cities",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Country cities retrieved successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "example": "Paris"
                                                    },
                                                    "country_id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "routes_count": {
                                                        "type": "integer",
                                                        "example": 15
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "pagination": {
                                            "properties": {
                                                "next_cursor": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "previous_cursor": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "has_next": {
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "has_previous": {
                                                    "type": "boolean",
                                                    "example": false
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "example": 10
                                                },
                                                "limit": {
                                                    "type": "integer",
                                                    "example": 20
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Country not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "not_found"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Country not found"
                                                },
                                                "details": {
                                                    "type": "object",
                                                    "nullable": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/countries/{country}/routes": {
            "get": {
                "tags": [
                    "Countries"
                ],
                "summary": "Get routes in a country",
                "description": "Returns routes in a specific country. For non-admin users, only routes from active countries are returned.",
                "operationId": "getCountryRoutes",
                "parameters": [
                    {
                        "name": "country",
                        "in": "path",
                        "description": "Country ID or code",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cursor",
                        "in": "query",
                        "description": "Cursor for pagination",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "direction",
                        "in": "query",
                        "description": "Pagination direction",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "forward",
                            "enum": [
                                "forward",
                                "backend"
                            ]
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "created_at_desc",
                            "enum": [
                                "name",
                                "name_desc",
                                "created_at",
                                "created_at_desc"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of routes",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Country routes retrieved successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Route"
                                            }
                                        },
                                        "pagination": {
                                            "properties": {
                                                "next_cursor": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "previous_cursor": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "has_next": {
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "has_previous": {
                                                    "type": "boolean",
                                                    "example": false
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "example": 25
                                                },
                                                "limit": {
                                                    "type": "integer",
                                                    "example": 20
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Country not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "not_found"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Country not found"
                                                },
                                                "details": {
                                                    "type": "object",
                                                    "nullable": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/favorites": {
            "get": {
                "tags": [
                    "Favorites"
                ],
                "summary": "Get user's favorite routes",
                "description": "Returns a paginated list of the authenticated user's favorite routes",
                "operationId": "getUserFavorites",
                "parameters": [
                    {
                        "name": "cursor",
                        "in": "query",
                        "description": "Cursor for pagination",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "direction",
                        "in": "query",
                        "description": "Pagination direction",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "forward",
                            "enum": [
                                "forward",
                                "backend"
                            ]
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "created_at_desc",
                            "enum": [
                                "created_at",
                                "created_at_desc",
                                "name",
                                "name_desc"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Results per page (DEPRECATED - use limit instead)",
                        "required": false,
                        "deprecated": true,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number (DEPRECATED - use cursor instead)",
                        "required": false,
                        "deprecated": true,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of favorite routes",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Favorite routes retrieved successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Route"
                                            }
                                        },
                                        "pagination": {
                                            "properties": {
                                                "next_cursor": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "previous_cursor": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "has_next": {
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "has_previous": {
                                                    "type": "boolean",
                                                    "example": false
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "example": 25
                                                },
                                                "limit": {
                                                    "type": "integer",
                                                    "example": 20
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "unauthorized"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Unauthenticated"
                                                },
                                                "details": {
                                                    "type": "object",
                                                    "nullable": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/favorites/{route}": {
            "post": {
                "tags": [
                    "Favorites"
                ],
                "summary": "Add route to favorites",
                "description": "Adds a route to the authenticated user's favorites list",
                "operationId": "addRouteToFavorites",
                "parameters": [
                    {
                        "name": "route",
                        "in": "path",
                        "description": "Route ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Route added to favorites",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Route added to favorites successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "route_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Route already in favorites",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "validation_error"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Route is already in favorites"
                                                },
                                                "details": {
                                                    "properties": {
                                                        "route_id": {
                                                            "type": "integer",
                                                            "example": 1
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "unauthorized"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Unauthenticated"
                                                },
                                                "details": {
                                                    "type": "object",
                                                    "nullable": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Favorites"
                ],
                "summary": "Remove route from favorites",
                "description": "Removes a route from the authenticated user's favorites list",
                "operationId": "removeRouteFromFavorites",
                "parameters": [
                    {
                        "name": "route",
                        "in": "path",
                        "description": "Route ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Route removed from favorites",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Route removed from favorites successfully"
                                        },
                                        "data": {
                                            "type": "null",
                                            "example": null
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Route not in favorites",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "validation_error"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Route is not in favorites"
                                                },
                                                "details": {
                                                    "properties": {
                                                        "route_id": {
                                                            "type": "integer",
                                                            "example": 1
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "unauthorized"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Unauthenticated"
                                                },
                                                "details": {
                                                    "type": "object",
                                                    "nullable": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/geo-points": {
            "get": {
                "tags": [
                    "Geo Points"
                ],
                "summary": "Get list of geo points with cursor pagination",
                "description": "Display a listing of geo points.",
                "operationId": "4895590dc6f2f974c5d5779d641192d4",
                "parameters": [
                    {
                        "name": "cursor",
                        "in": "query",
                        "description": "Cursor for pagination",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of items per page (default: 20, max: 100)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 20
                        }
                    },
                    {
                        "name": "route_id",
                        "in": "query",
                        "description": "Filter by route ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "place_id",
                        "in": "query",
                        "description": "Filter by place ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/GeoPoint"
                                            }
                                        },
                                        "pagination": {
                                            "$ref": "#/components/schemas/CursorPagination"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Geo Points"
                ],
                "summary": "Create a new geo point",
                "description": "Store a new geo point.",
                "operationId": "a8eb7087f46bb8e91a1dfce6fe98ba0b",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "route_id",
                                    "latitude",
                                    "longitude",
                                    "name"
                                ],
                                "properties": {
                                    "route_id": {
                                        "type": "integer"
                                    },
                                    "place_id": {
                                        "type": "integer",
                                        "nullable": true
                                    },
                                    "latitude": {
                                        "type": "number",
                                        "format": "float"
                                    },
                                    "longitude": {
                                        "type": "number",
                                        "format": "float"
                                    },
                                    "name": {
                                        "type": "string"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "elevation": {
                                        "type": "number",
                                        "format": "float"
                                    },
                                    "order": {
                                        "type": "integer"
                                    },
                                    "type": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Geo point created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/GeoPoint"
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/api/v1/geo-points/{id}": {
            "get": {
                "tags": [
                    "Geo Points"
                ],
                "summary": "Get specific geo point",
                "description": "Get a specific geo point.",
                "operationId": "d51f8c13a133544b57bb9f545d3f2c3c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of geo point",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/GeoPoint"
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Geo point not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Geo Points"
                ],
                "summary": "Update a geo point",
                "description": "Update a geo point.",
                "operationId": "06d643819e84abe81b54806a0bd063e5",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of geo point",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "route_id": {
                                        "type": "integer"
                                    },
                                    "place_id": {
                                        "type": "integer",
                                        "nullable": true
                                    },
                                    "latitude": {
                                        "type": "number",
                                        "format": "float"
                                    },
                                    "longitude": {
                                        "type": "number",
                                        "format": "float"
                                    },
                                    "name": {
                                        "type": "string"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "elevation": {
                                        "type": "number",
                                        "format": "float"
                                    },
                                    "order": {
                                        "type": "integer"
                                    },
                                    "type": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Geo point updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/GeoPoint"
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Geo point not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Geo Points"
                ],
                "summary": "Delete a geo point",
                "description": "Delete a geo point.",
                "operationId": "d5a8a272785d771766f5814512228c47",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of geo point",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Geo point deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Geo point not found"
                    }
                }
            }
        },
        "/api/v1/places": {
            "get": {
                "tags": [
                    "Places"
                ],
                "summary": "Get all places",
                "description": "Returns a paginated list of places with optional filtering",
                "operationId": "getPlaces",
                "parameters": [
                    {
                        "name": "city_id",
                        "in": "query",
                        "description": "Filter by city ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "category_id",
                        "in": "query",
                        "description": "Filter by category ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "cursor",
                        "in": "query",
                        "description": "Cursor for pagination",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "direction",
                        "in": "query",
                        "description": "Pagination direction",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "forward",
                            "enum": [
                                "forward",
                                "backend"
                            ]
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "name",
                            "enum": [
                                "name",
                                "name_desc",
                                "created_at",
                                "created_at_desc"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Results per page (DEPRECATED - use limit instead)",
                        "required": false,
                        "deprecated": true,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number (DEPRECATED - use cursor instead)",
                        "required": false,
                        "deprecated": true,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of places",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Places retrieved successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Place"
                                            }
                                        },
                                        "pagination": {
                                            "properties": {
                                                "next_cursor": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "previous_cursor": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "has_next": {
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "has_previous": {
                                                    "type": "boolean",
                                                    "example": false
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "example": 50
                                                },
                                                "limit": {
                                                    "type": "integer",
                                                    "example": 20
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Places"
                ],
                "summary": "Create a new place",
                "description": "Creates a new place (requires authentication)",
                "operationId": "storePlace",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PlaceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Place created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Place created successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/Place"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "data": {
                                            "type": "object",
                                            "example": {
                                                "name": [
                                                    "The name field is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        },
                                        "data": {
                                            "type": "object",
                                            "example": null
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/places/{place}": {
            "get": {
                "tags": [
                    "Places"
                ],
                "summary": "Get place details",
                "description": "Returns details of a specific place by ID. For non-admin users, places from inactive countries return a 404 error.",
                "operationId": "getPlaceById",
                "parameters": [
                    {
                        "name": "place",
                        "in": "path",
                        "description": "Place ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Place details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Place details retrieved successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/Place"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Place not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Place not found"
                                        },
                                        "data": {
                                            "type": "object",
                                            "example": null
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Places"
                ],
                "summary": "Update a place",
                "description": "Updates an existing place (requires authentication)",
                "operationId": "updatePlace",
                "parameters": [
                    {
                        "name": "place",
                        "in": "path",
                        "description": "Place ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PlaceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Place updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Place updated successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/Place"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Place not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Place not found"
                                        },
                                        "data": {
                                            "type": "object",
                                            "example": null
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        },
                                        "data": {
                                            "type": "object",
                                            "example": null
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "data": {
                                            "type": "object",
                                            "example": {
                                                "name": [
                                                    "The name field is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Places"
                ],
                "summary": "Delete a place",
                "description": "Deletes a place (requires authentication)",
                "operationId": "deletePlace",
                "parameters": [
                    {
                        "name": "place",
                        "in": "path",
                        "description": "Place ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Place deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Place deleted successfully"
                                        },
                                        "data": {
                                            "type": "null",
                                            "example": null
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Cannot delete place with associated media",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Cannot delete this place because it has associated media."
                                        },
                                        "errors": {
                                            "properties": {
                                                "has_media": {
                                                    "type": "boolean",
                                                    "example": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Place not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Place not found"
                                        },
                                        "data": {
                                            "type": "object",
                                            "example": null
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        },
                                        "data": {
                                            "type": "object",
                                            "example": null
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/places/{place}/routes": {
            "get": {
                "tags": [
                    "Places"
                ],
                "summary": "Get routes that include a place",
                "description": "Returns a paginated list of routes that include the specified place. For non-admin users, places from inactive countries return a 404 error.",
                "operationId": "getPlaceRoutes",
                "parameters": [
                    {
                        "name": "place",
                        "in": "path",
                        "description": "Place ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "cursor",
                        "in": "query",
                        "description": "Cursor for pagination",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "direction",
                        "in": "query",
                        "description": "Pagination direction",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "forward",
                            "enum": [
                                "forward",
                                "backend"
                            ]
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "created_at_desc",
                            "enum": [
                                "name",
                                "name_desc",
                                "created_at",
                                "created_at_desc",
                                "rating",
                                "rating_desc"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Results per page (DEPRECATED - use limit instead)",
                        "required": false,
                        "deprecated": true,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number (DEPRECATED - use cursor instead)",
                        "required": false,
                        "deprecated": true,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of routes containing the place",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Place routes retrieved successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Route"
                                            }
                                        },
                                        "pagination": {
                                            "properties": {
                                                "next_cursor": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "previous_cursor": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "has_next": {
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "has_previous": {
                                                    "type": "boolean",
                                                    "example": false
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "example": 10
                                                },
                                                "limit": {
                                                    "type": "integer",
                                                    "example": 20
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Place not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Place not found"
                                        },
                                        "data": {
                                            "type": "object",
                                            "example": null
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/ratings": {
            "get": {
                "tags": [
                    "Ratings"
                ],
                "summary": "Get authenticated user's ratings",
                "description": "Returns a paginated list of ratings submitted by the authenticated user",
                "operationId": "getUserRatingsList",
                "parameters": [
                    {
                        "name": "cursor",
                        "in": "query",
                        "description": "Cursor for pagination",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "direction",
                        "in": "query",
                        "description": "Pagination direction",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "forward",
                            "enum": [
                                "forward",
                                "backend"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Results per page (DEPRECATED - use limit instead)",
                        "required": false,
                        "deprecated": true,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number (DEPRECATED - use cursor instead)",
                        "required": false,
                        "deprecated": true,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of user ratings",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "User ratings retrieved successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Rating"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "unauthorized"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Unauthenticated."
                                                },
                                                "details": {
                                                    "type": "object",
                                                    "nullable": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/routes/{route}/ratings": {
            "get": {
                "tags": [
                    "Routes"
                ],
                "summary": "Get ratings for a route",
                "description": "Returns ratings for a specific route. For non-admin users, only ratings from routes in active countries are accessible.",
                "operationId": "getRouteRatings",
                "parameters": [
                    {
                        "name": "route",
                        "in": "path",
                        "description": "Route ID or slug",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cursor",
                        "in": "query",
                        "description": "Cursor for pagination",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "direction",
                        "in": "query",
                        "description": "Pagination direction",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "forward",
                            "enum": [
                                "forward",
                                "backend"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Results per page (DEPRECATED - use limit instead)",
                        "required": false,
                        "deprecated": true,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number (DEPRECATED - use cursor instead)",
                        "required": false,
                        "deprecated": true,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of ratings",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Route ratings retrieved successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Rating"
                                            }
                                        },
                                        "pagination": {
                                            "properties": {
                                                "next_cursor": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "previous_cursor": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "has_next": {
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "has_previous": {
                                                    "type": "boolean",
                                                    "example": false
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "example": 25
                                                },
                                                "limit": {
                                                    "type": "integer",
                                                    "example": 20
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Route not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "not_found"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Route not found"
                                                },
                                                "details": {
                                                    "type": "object",
                                                    "nullable": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Ratings"
                ],
                "summary": "Create a new rating",
                "description": "Create a rating for a travel route",
                "operationId": "storeRating",
                "parameters": [
                    {
                        "name": "route",
                        "in": "path",
                        "description": "Route ID or slug",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RatingRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Rating created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Rating created successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/Rating"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "unauthorized"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Unauthenticated."
                                                },
                                                "details": {
                                                    "type": "object",
                                                    "nullable": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Route not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "not_found"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Route not found"
                                                },
                                                "details": {
                                                    "type": "object",
                                                    "nullable": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error or already rated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "validation_error"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "You have already rated this route. Use PUT to update."
                                                },
                                                "details": {
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/ratings/{rating}": {
            "put": {
                "tags": [
                    "Ratings"
                ],
                "summary": "Update a rating",
                "description": "Update an existing rating (only for the owner of the rating)",
                "operationId": "updateRating",
                "parameters": [
                    {
                        "name": "rating",
                        "in": "path",
                        "description": "Rating ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RatingRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Rating updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Rating updated successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/Rating"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "unauthorized"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Unauthenticated."
                                                },
                                                "details": {
                                                    "type": "object",
                                                    "nullable": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized - Not the rating owner",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "forbidden"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "You are not authorized to update this rating."
                                                },
                                                "details": {
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Rating not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "not_found"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Rating not found"
                                                },
                                                "details": {
                                                    "type": "object",
                                                    "nullable": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "validation_error"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "The rating field is required."
                                                },
                                                "details": {
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Ratings"
                ],
                "summary": "Delete a rating",
                "description": "Delete an existing rating (only for the owner of the rating)",
                "operationId": "deleteRating",
                "parameters": [
                    {
                        "name": "rating",
                        "in": "path",
                        "description": "Rating ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Rating deleted successfully"
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "unauthorized"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Unauthenticated."
                                                },
                                                "details": {
                                                    "type": "object",
                                                    "nullable": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized - Not the rating owner",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "forbidden"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "You are not authorized to delete this rating."
                                                },
                                                "details": {
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Rating not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "not_found"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Rating not found"
                                                },
                                                "details": {
                                                    "type": "object",
                                                    "nullable": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/routes": {
            "get": {
                "tags": [
                    "Routes"
                ],
                "summary": "Get all routes",
                "description": "Returns a paginated list of travel routes with filtering options. For non-admin users, only routes from active countries are returned. Uses cursor-based pagination.",
                "operationId": "getRoutes",
                "parameters": [
                    {
                        "name": "country_id",
                        "in": "query",
                        "description": "Filter by country ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "city_id",
                        "in": "query",
                        "description": "Filter by city ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "category_id",
                        "in": "query",
                        "description": "Filter by category ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "difficulty",
                        "in": "query",
                        "description": "Filter by difficulty level",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "easy",
                                    "moderate",
                                    "challenging",
                                    "difficult"
                                ]
                            }
                        }
                    },
                    {
                        "name": "min_distance",
                        "in": "query",
                        "description": "Filter by minimum distance (km)",
                        "required": false,
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "max_distance",
                        "in": "query",
                        "description": "Filter by maximum distance (km)",
                        "required": false,
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "min_elevation",
                        "in": "query",
                        "description": "Filter by minimum elevation gain (m)",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "max_elevation",
                        "in": "query",
                        "description": "Filter by maximum elevation gain (m)",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Search routes by name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cursor",
                        "in": "query",
                        "description": "Opaque string pointing to a specific item in the result set. Valid for 30 minutes after generation.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "direction",
                        "in": "query",
                        "description": "Pagination direction",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "forward",
                            "enum": [
                                "forward",
                                "backend"
                            ]
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort results by field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "created_at_desc",
                            "enum": [
                                "name",
                                "name_desc",
                                "distance",
                                "distance_desc",
                                "elevation",
                                "elevation_desc",
                                "rating",
                                "rating_desc",
                                "created_at",
                                "created_at_desc"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of routes",
                        "headers": {
                            "X-RateLimit-Limit": {
                                "description": "Maximum number of requests per time window",
                                "schema": {
                                    "type": "integer",
                                    "example": 60
                                }
                            },
                            "X-RateLimit-Remaining": {
                                "description": "Number of requests left in current time window",
                                "schema": {
                                    "type": "integer",
                                    "example": 59
                                }
                            },
                            "X-RateLimit-Reset": {
                                "description": "Timestamp when the rate limit window resets",
                                "schema": {
                                    "type": "integer",
                                    "example": 1609459200
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Route"
                                            }
                                        },
                                        "pagination": {
                                            "properties": {
                                                "next_cursor": {
                                                    "type": "string",
                                                    "example": "eyJpZCI6MjAsInZhbHVlIjoxNjA5NDU5MjAwLCJleHBpcmVzX2F0IjoiMjAyNC0wMS0xNVQxMjozMDowMFoifQ==",
                                                    "nullable": true
                                                },
                                                "previous_cursor": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "has_next": {
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "has_previous": {
                                                    "type": "boolean",
                                                    "example": false
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "example": 50
                                                },
                                                "limit": {
                                                    "type": "integer",
                                                    "example": 20
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request when pagination parameters are invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "invalid_cursor"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "The provided cursor is invalid or has expired"
                                                },
                                                "details": {
                                                    "type": "object",
                                                    "nullable": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/routes/featured": {
            "get": {
                "tags": [
                    "Routes"
                ],
                "summary": "Get featured routes",
                "description": "Returns a list of featured travel routes. For non-admin users, only routes from active countries are returned.",
                "operationId": "getFeaturedRoutes",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of routes to return",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 5,
                            "maximum": 50
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of featured routes",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Featured routes retrieved successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Route"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/routes/{route}": {
            "get": {
                "tags": [
                    "Routes"
                ],
                "summary": "Get route details",
                "description": "Returns details of a specific route including ratings and points of interest. For non-admin users, only routes from active countries are accessible.",
                "operationId": "getRouteById",
                "parameters": [
                    {
                        "name": "route",
                        "in": "path",
                        "description": "Route ID or slug",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Route details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Route details retrieved successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/Route"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Route not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Route not found"
                                        },
                                        "data": {
                                            "type": "object",
                                            "example": null
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/routes/{route}/places": {
            "get": {
                "tags": [
                    "Routes"
                ],
                "summary": "Get places on a route",
                "description": "Returns places of interest on a specific route. For non-admin users, only places from routes in active countries are accessible.",
                "operationId": "getRoutePlaces",
                "parameters": [
                    {
                        "name": "route",
                        "in": "path",
                        "description": "Route ID or slug",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of places",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Route places retrieved successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Place"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Route not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Route not found"
                                        },
                                        "data": {
                                            "type": "object",
                                            "example": null
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/search": {
            "get": {
                "tags": [
                    "Search"
                ],
                "summary": "Search across resources",
                "description": "Search for resources by query term. For non-admin users, resources from inactive countries will be filtered out. Uses cursor-based pagination for consistent results.",
                "operationId": "searchResources",
                "parameters": [
                    {
                        "name": "query",
                        "in": "query",
                        "description": "Search term",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Resource type to search",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "all",
                            "enum": [
                                "all",
                                "routes",
                                "places",
                                "cities",
                                "countries",
                                "categories"
                            ]
                        }
                    },
                    {
                        "name": "cursor",
                        "in": "query",
                        "description": "Opaque string pointing to a specific item in the result set",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum items per resource type",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "direction",
                        "in": "query",
                        "description": "Pagination direction",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "forward",
                            "enum": [
                                "forward",
                                "backend"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search results",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "query": {
                                                    "type": "string",
                                                    "example": "paris"
                                                },
                                                "type": {
                                                    "type": "string",
                                                    "example": "all"
                                                },
                                                "total_results": {
                                                    "type": "integer",
                                                    "example": 15
                                                },
                                                "results": {
                                                    "properties": {
                                                        "routes": {
                                                            "type": "array",
                                                            "items": {
                                                                "properties": {
                                                                    "id": {
                                                                        "type": "integer",
                                                                        "example": 1
                                                                    },
                                                                    "name": {
                                                                        "type": "string",
                                                                        "example": "Paris City Tour"
                                                                    },
                                                                    "description": {
                                                                        "type": "string",
                                                                        "example": "A tour of Paris highlights"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "places": {
                                                            "type": "array",
                                                            "items": {
                                                                "properties": {
                                                                    "id": {
                                                                        "type": "integer",
                                                                        "example": 1
                                                                    },
                                                                    "name": {
                                                                        "type": "string",
                                                                        "example": "Eiffel Tower"
                                                                    },
                                                                    "description": {
                                                                        "type": "string",
                                                                        "example": "Famous landmark"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "cities": {
                                                            "type": "array",
                                                            "items": {
                                                                "properties": {
                                                                    "id": {
                                                                        "type": "integer",
                                                                        "example": 1
                                                                    },
                                                                    "name": {
                                                                        "type": "string",
                                                                        "example": "Paris"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "countries": {
                                                            "type": "array",
                                                            "items": {
                                                                "properties": {
                                                                    "id": {
                                                                        "type": "integer",
                                                                        "example": 1
                                                                    },
                                                                    "name": {
                                                                        "type": "string",
                                                                        "example": "France"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "categories": {
                                                            "type": "array",
                                                            "items": {
                                                                "properties": {
                                                                    "id": {
                                                                        "type": "integer",
                                                                        "example": 1
                                                                    },
                                                                    "name": {
                                                                        "type": "string",
                                                                        "example": "Sightseeing"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "pagination": {
                                            "properties": {
                                                "next_cursor": {
                                                    "type": "string",
                                                    "example": "eyJwb3NpdGlvbiI6MjAsImV4cGlyZXNfYXQiOiIyMDIzLTA5LTAxVDEyOjAwOjAwKzAwMDAifQ==",
                                                    "nullable": true
                                                },
                                                "previous_cursor": {
                                                    "type": "string",
                                                    "example": "eyJwb3NpdGlvbiI6MCwiZXhwaXJlc19hdCI6IjIwMjMtMDktMDFUMTI6MDA6MDArMDAwMCJ9",
                                                    "nullable": true
                                                },
                                                "has_next": {
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "has_previous": {
                                                    "type": "boolean",
                                                    "example": false
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "example": 25
                                                },
                                                "limit": {
                                                    "type": "integer",
                                                    "example": 20
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "meta": {
                                            "properties": {
                                                "request_id": {
                                                    "type": "string"
                                                },
                                                "timestamp": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "validation_error"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Search query is required"
                                                },
                                                "details": {
                                                    "type": "object",
                                                    "nullable": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "server_error"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "An error occurred while processing your search"
                                                },
                                                "details": {
                                                    "type": "object",
                                                    "nullable": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/search": {
            "get": {
                "tags": [
                    "Search"
                ],
                "summary": "Search across multiple content types",
                "description": "Search routes, places, cities, countries, and categories with cursor-based pagination.\n *     The `type` parameter determines which content types to include in the search.\n *     Forward and backend pagination are fully supported for all resource types.\n *     Results are sorted by relevance, with most relevant items appearing first.",
                "operationId": "searchContent",
                "parameters": [
                    {
                        "name": "query",
                        "in": "query",
                        "description": "Search term",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Type of content to search for. Use 'all' to search across all content types.",
                        "schema": {
                            "type": "string",
                            "default": "all",
                            "enum": [
                                "all",
                                "routes",
                                "places",
                                "cities",
                                "countries",
                                "categories"
                            ]
                        }
                    },
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/direction"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search results with pagination metadata",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "query": {
                                                    "description": "The search term used",
                                                    "type": "string",
                                                    "example": "mountain"
                                                },
                                                "type": {
                                                    "description": "The content type that was searched",
                                                    "type": "string",
                                                    "example": "all"
                                                },
                                                "total_results": {
                                                    "description": "Total number of results across all types",
                                                    "type": "integer",
                                                    "example": 42
                                                },
                                                "results": {
                                                    "description": "Search results grouped by content type",
                                                    "properties": {
                                                        "routes": {
                                                            "description": "Routes matching the search criteria",
                                                            "type": "array",
                                                            "items": {
                                                                "$ref": "#/components/schemas/Route"
                                                            }
                                                        },
                                                        "places": {
                                                            "description": "Places matching the search criteria",
                                                            "type": "array",
                                                            "items": {
                                                                "$ref": "#/components/schemas/Place"
                                                            }
                                                        },
                                                        "cities": {
                                                            "description": "Cities matching the search criteria",
                                                            "type": "array",
                                                            "items": {
                                                                "$ref": "#/components/schemas/City"
                                                            }
                                                        },
                                                        "countries": {
                                                            "description": "Countries matching the search criteria",
                                                            "type": "array",
                                                            "items": {
                                                                "$ref": "#/components/schemas/Country"
                                                            }
                                                        },
                                                        "categories": {
                                                            "description": "Categories matching the search criteria",
                                                            "type": "array",
                                                            "items": {
                                                                "$ref": "#/components/schemas/Category"
                                                            }
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "pagination": {
                                            "$ref": "#/components/schemas/PaginationLinks"
                                        },
                                        "meta": {
                                            "properties": {
                                                "request_id": {
                                                    "description": "Unique identifier for the request",
                                                    "type": "string",
                                                    "example": "550e8400-e29b-41d4-a716-446655440000"
                                                },
                                                "timestamp": {
                                                    "description": "ISO 8601 timestamp of when the response was generated",
                                                    "type": "string",
                                                    "format": "date-time",
                                                    "example": "2023-09-15T12:34:56+00:00"
                                                },
                                                "message": {
                                                    "description": "Success message",
                                                    "type": "string",
                                                    "example": "Search results retrieved successfully"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get authenticated user profile",
                "description": "Returns the authenticated user's profile",
                "operationId": "getUserProfile",
                "responses": {
                    "200": {
                        "description": "User profile retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/User"
                                        },
                                        "meta": {
                                            "properties": {
                                                "request_id": {
                                                    "type": "string",
                                                    "example": "fc7ecd41-30a5-4e53-8f28-43142c589abc"
                                                },
                                                "timestamp": {
                                                    "type": "string",
                                                    "format": "date-time",
                                                    "example": "2023-08-15T14:30:00Z"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "unauthenticated"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Unauthenticated."
                                                },
                                                "details": {
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "User"
                ],
                "summary": "Update user profile",
                "description": "Updates the authenticated user's profile information",
                "operationId": "updateUserProfile",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User profile updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/User"
                                        },
                                        "meta": {
                                            "properties": {
                                                "request_id": {
                                                    "type": "string",
                                                    "example": "fc7ecd41-30a5-4e53-8f28-43142c589abc"
                                                },
                                                "timestamp": {
                                                    "type": "string",
                                                    "format": "date-time",
                                                    "example": "2023-08-15T14:30:00Z"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "validation_failed"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "The given data was invalid."
                                                },
                                                "details": {
                                                    "properties": {
                                                        "email": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "string",
                                                                "example": "The email has already been taken."
                                                            }
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "unauthenticated"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Unauthenticated."
                                                },
                                                "details": {
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/user/favorites": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get user favorites",
                "description": "Returns the authenticated user's favorite routes",
                "operationId": "getUserProfileFavorites",
                "parameters": [
                    {
                        "name": "cursor",
                        "in": "query",
                        "description": "Cursor for pagination",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "direction",
                        "in": "query",
                        "description": "Pagination direction",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "forward",
                            "enum": [
                                "forward",
                                "backend"
                            ]
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "created_at_desc",
                            "enum": [
                                "created_at",
                                "created_at_desc",
                                "name",
                                "name_desc"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Results per page (DEPRECATED - use limit instead)",
                        "required": false,
                        "deprecated": true,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number (DEPRECATED - use cursor instead)",
                        "required": false,
                        "deprecated": true,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User favorites retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Route"
                                            }
                                        },
                                        "pagination": {
                                            "properties": {
                                                "next_cursor": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "previous_cursor": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "has_next": {
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "has_previous": {
                                                    "type": "boolean",
                                                    "example": false
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "example": 25
                                                },
                                                "limit": {
                                                    "type": "integer",
                                                    "example": 20
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "unauthenticated"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Unauthenticated."
                                                },
                                                "details": {
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/user/ratings": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get user ratings",
                "description": "Returns the ratings created by the authenticated user",
                "operationId": "getUserRatings",
                "parameters": [
                    {
                        "name": "cursor",
                        "in": "query",
                        "description": "Cursor for pagination",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "direction",
                        "in": "query",
                        "description": "Pagination direction",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "forward",
                            "enum": [
                                "forward",
                                "backend"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Results per page (DEPRECATED - use limit instead)",
                        "required": false,
                        "deprecated": true,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number (DEPRECATED - use cursor instead)",
                        "required": false,
                        "deprecated": true,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User ratings retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Rating"
                                            }
                                        },
                                        "pagination": {
                                            "properties": {
                                                "next_cursor": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "previous_cursor": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "has_next": {
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "has_previous": {
                                                    "type": "boolean",
                                                    "example": false
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "example": 25
                                                },
                                                "limit": {
                                                    "type": "integer",
                                                    "example": 20
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "unauthenticated"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Unauthenticated."
                                                },
                                                "details": {
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "PaginationResponse": {
                "description": "Standard pagination response format",
                "properties": {
                    "pagination": {
                        "properties": {
                            "next_cursor": {
                                "description": "Opaque cursor string for the next page",
                                "type": "string",
                                "example": "ZXlKMllXeDFaU0k2TVRBd0xDSnBaQ0k2TXpBd0xDSmxlSEJwY21WelgyRjBJam9pTWpBeU5DMHdPQzB6TUZRd05qb3hOam94TlM0eU5URnZklbQ==",
                                "nullable": true
                            },
                            "previous_cursor": {
                                "description": "Opaque cursor string for the previous page",
                                "type": "string",
                                "example": "ZXlKMllXeDFaU0k2TVRBd0xDSnBaQ0k2TXpBd0xDSmxlSEJwY21WelgyRjBJam9pTWpBeU5DMHdPQzB6TUZRd05qb3hOam94TlM0eU5URnAzaQ==",
                                "nullable": true
                            },
                            "has_next": {
                                "description": "Whether there is a next page available",
                                "type": "boolean",
                                "example": true
                            },
                            "has_previous": {
                                "description": "Whether there is a previous page available",
                                "type": "boolean",
                                "example": false
                            },
                            "total": {
                                "description": "Total number of items",
                                "type": "integer",
                                "example": 50
                            },
                            "limit": {
                                "description": "Maximum items per page",
                                "type": "integer",
                                "example": 20
                            },
                            "error": {
                                "description": "Error information if there was a problem with the cursor",
                                "properties": {
                                    "code": {
                                        "description": "Error code",
                                        "type": "string",
                                        "example": "invalid_cursor"
                                    },
                                    "message": {
                                        "description": "Human-readable error message",
                                        "type": "string",
                                        "example": "The provided cursor is invalid or has expired"
                                    }
                                },
                                "type": "object",
                                "nullable": true
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "RegisterRequest": {
                "required": [
                    "name",
                    "email",
                    "password",
                    "password_confirmation"
                ],
                "properties": {
                    "name": {
                        "description": "User's full name",
                        "type": "string",
                        "example": "John Doe"
                    },
                    "email": {
                        "description": "User's email address",
                        "type": "string",
                        "format": "email",
                        "example": "user@example.com"
                    },
                    "password": {
                        "description": "User's password",
                        "type": "string",
                        "format": "password",
                        "example": "password123"
                    },
                    "password_confirmation": {
                        "description": "Password confirmation",
                        "type": "string",
                        "format": "password",
                        "example": "password123"
                    }
                },
                "type": "object"
            },
            "LoginRequest": {
                "required": [
                    "email",
                    "password"
                ],
                "properties": {
                    "email": {
                        "description": "User's email address",
                        "type": "string",
                        "format": "email",
                        "example": "user@example.com"
                    },
                    "password": {
                        "description": "User's password",
                        "type": "string",
                        "format": "password",
                        "example": "password123"
                    }
                },
                "type": "object"
            },
            "UserResponse": {
                "properties": {
                    "id": {
                        "description": "User ID",
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "description": "User's full name",
                        "type": "string",
                        "example": "John Doe"
                    },
                    "email": {
                        "description": "User's email address",
                        "type": "string",
                        "format": "email",
                        "example": "user@example.com"
                    },
                    "created_at": {
                        "description": "Creation timestamp",
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-01-01T12:00:00Z"
                    }
                },
                "type": "object"
            },
            "AuthResponse": {
                "properties": {
                    "status": {
                        "type": "string",
                        "example": "success"
                    },
                    "message": {
                        "type": "string",
                        "example": "User registered successfully"
                    },
                    "data": {
                        "properties": {
                            "user": {
                                "$ref": "#/components/schemas/UserResponse"
                            },
                            "token": {
                                "type": "string",
                                "example": "1|laravel_sanctum_Xe2BT9..."
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "Category": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Historical"
                    },
                    "slug": {
                        "type": "string",
                        "example": "historical"
                    },
                    "icon": {
                        "type": "string",
                        "example": "landmark"
                    },
                    "color": {
                        "type": "string",
                        "example": "#4A6572"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "places_count": {
                        "type": "integer",
                        "example": 8
                    },
                    "routes_count": {
                        "type": "integer",
                        "example": 5
                    }
                },
                "type": "object"
            },
            "CategoryRequest": {
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Category name",
                        "type": "string",
                        "example": "Historical"
                    },
                    "icon": {
                        "description": "Category icon name",
                        "type": "string",
                        "example": "landmark"
                    },
                    "color": {
                        "description": "Category color in hex format",
                        "type": "string",
                        "example": "#4A6572"
                    }
                },
                "type": "object"
            },
            "City": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Paris"
                    },
                    "slug": {
                        "type": "string",
                        "example": "paris"
                    },
                    "country_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "latitude": {
                        "type": "number",
                        "format": "float",
                        "example": 48.8566
                    },
                    "longitude": {
                        "type": "number",
                        "format": "float",
                        "example": 2.3522
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "routes_count": {
                        "type": "integer",
                        "example": 25
                    },
                    "country": {
                        "$ref": "#/components/schemas/Country"
                    }
                },
                "type": "object"
            },
            "CityRequest": {
                "required": [
                    "name",
                    "country_id"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Paris"
                    },
                    "country_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "latitude": {
                        "type": "number",
                        "format": "float",
                        "example": 48.8566
                    },
                    "longitude": {
                        "type": "number",
                        "format": "float",
                        "example": 2.3522
                    }
                },
                "type": "object"
            },
            "Country": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "France"
                    },
                    "code": {
                        "type": "string",
                        "example": "FR"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "cities_count": {
                        "type": "integer",
                        "example": 12
                    },
                    "routes_count": {
                        "type": "integer",
                        "example": 45
                    }
                },
                "type": "object"
            },
            "CountryWithCities": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Country"
                    },
                    {
                        "properties": {
                            "cities": {
                                "type": "array",
                                "items": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Paris"
                                        },
                                        "country_id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "routes_count": {
                                            "type": "integer",
                                            "example": 15
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "Place": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Eiffel Tower"
                    },
                    "address": {
                        "type": "string",
                        "example": "Champ de Mars, 5 Av. Anatole France, 75007 Paris"
                    },
                    "description": {
                        "type": "string",
                        "example": "The Eiffel Tower is a wrought-iron lattice tower on the Champ de Mars in Paris."
                    },
                    "city_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "category_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "user_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "latitude": {
                        "type": "number",
                        "format": "float",
                        "example": 48.8584
                    },
                    "longitude": {
                        "type": "number",
                        "format": "float",
                        "example": 2.2945
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "city": {
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": 1
                            },
                            "name": {
                                "type": "string",
                                "example": "Paris"
                            },
                            "country": {
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "category": {
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": 1
                            },
                            "name": {
                                "type": "string",
                                "example": "Landmarks"
                            }
                        },
                        "type": "object"
                    },
                    "media": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "PlaceRequest": {
                "required": [
                    "name",
                    "city_id",
                    "category_id",
                    "latitude",
                    "longitude"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Eiffel Tower"
                    },
                    "address": {
                        "type": "string",
                        "example": "Champ de Mars, 5 Av. Anatole France, 75007 Paris"
                    },
                    "description": {
                        "type": "string",
                        "example": "The Eiffel Tower is a wrought-iron lattice tower on the Champ de Mars in Paris."
                    },
                    "city_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "category_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "latitude": {
                        "type": "number",
                        "format": "float",
                        "example": 48.8584
                    },
                    "longitude": {
                        "type": "number",
                        "format": "float",
                        "example": 2.2945
                    }
                },
                "type": "object"
            },
            "RatingRequest": {
                "required": [
                    "rating"
                ],
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PaginationResponse"
                    },
                    {
                        "properties": {
                            "rating": {
                                "description": "Rating value from 1 to 5",
                                "type": "integer",
                                "example": 4
                            },
                            "comment": {
                                "type": "string",
                                "example": "Great route with beautiful views!",
                                "nullable": true
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "Route": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PaginationResponse"
                    },
                    {
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": 1
                            },
                            "name": {
                                "type": "string",
                                "example": "Historical Paris Tour"
                            },
                            "description": {
                                "type": "string",
                                "example": "A walking tour through Paris's most historic sites"
                            },
                            "city_id": {
                                "type": "integer",
                                "example": 1
                            },
                            "user_id": {
                                "type": "integer",
                                "example": 1
                            },
                            "duration": {
                                "description": "Duration in minutes",
                                "type": "integer",
                                "example": 180
                            },
                            "distance": {
                                "description": "Distance in kilometers",
                                "type": "number",
                                "format": "float",
                                "example": 5.2
                            },
                            "elevation": {
                                "description": "Elevation gain in meters",
                                "type": "integer",
                                "example": 50
                            },
                            "difficulty": {
                                "type": "string",
                                "enum": [
                                    "easy",
                                    "moderate",
                                    "challenging",
                                    "difficult"
                                ],
                                "example": "moderate"
                            },
                            "is_featured": {
                                "type": "boolean",
                                "example": true
                            },
                            "created_at": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "updated_at": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "city": {
                                "properties": {
                                    "id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "name": {
                                        "type": "string",
                                        "example": "Paris"
                                    },
                                    "country": {
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "categories": {
                                "type": "array",
                                "items": {
                                    "type": "object"
                                }
                            },
                            "media": {
                                "type": "array",
                                "items": {
                                    "type": "object"
                                }
                            },
                            "ratings_avg": {
                                "type": "number",
                                "format": "float",
                                "example": 4.5
                            },
                            "ratings_count": {
                                "type": "integer",
                                "example": 24
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "PaginationRequest": {
                "description": "Pagination parameters for requests",
                "properties": {
                    "cursor": {
                        "description": "Opaque Base64-encoded string that points to a specific item in the result set. Valid for 30 minutes after generation. Do not modify or decode this value.",
                        "type": "string",
                        "example": "eyJ2YWx1ZSI6MTY4MzI0MDAwMCwiaWQiOjQyLCJleHBpcmVzX2F0IjoiMjAyNC0wMS0xNVQxMjozMDowMFoifQ=="
                    },
                    "limit": {
                        "description": "Maximum number of items per page (default: 20, max: 100)",
                        "type": "integer",
                        "default": 20,
                        "example": 20
                    },
                    "direction": {
                        "description": "Direction of pagination. Use 'forward' for next page or 'backend' to navigate to previous page.",
                        "type": "string",
                        "default": "forward",
                        "enum": [
                            "forward",
                            "backend"
                        ],
                        "example": "forward"
                    }
                },
                "type": "object"
            },
            "PaginationLinks": {
                "description": "Pagination metadata for navigating between pages",
                "properties": {
                    "next_cursor": {
                        "description": "Cursor for the next page of results. Valid for 30 minutes after generation. Will be null if there are no more results.",
                        "type": "string",
                        "example": "eyJ2YWx1ZSI6MTY4MzI0MDAwMCwiaWQiOjQyLCJleHBpcmVzX2F0IjoiMjAyNC0wMS0xNVQxMjozMDowMFoifQ==",
                        "nullable": true
                    },
                    "previous_cursor": {
                        "description": "Cursor for the previous page of results. Valid for 30 minutes after generation. Will be null if this is the first page.",
                        "type": "string",
                        "example": "eyJ2YWx1ZSI6MTY4MzIzOTUwMCwiaWQiOjM4LCJleHBpcmVzX2F0IjoiMjAyNC0wMS0xNVQxMjozMDowMFoifQ==",
                        "nullable": true
                    },
                    "has_next": {
                        "description": "Whether there is a next page of results. Use with next_cursor for forward pagination.",
                        "type": "boolean",
                        "example": true
                    },
                    "has_previous": {
                        "description": "Whether there is a previous page of results. Use with previous_cursor for backend pagination.",
                        "type": "boolean",
                        "example": false
                    },
                    "total": {
                        "description": "Total number of items matching the query",
                        "type": "integer",
                        "example": 150
                    },
                    "limit": {
                        "description": "Maximum number of items per page used for this request",
                        "type": "integer",
                        "example": 20
                    }
                },
                "type": "object"
            },
            "PaginatedResponse": {
                "properties": {
                    "data": {
                        "description": "Array of items",
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "pagination": {
                        "$ref": "#/components/schemas/PaginationLinks"
                    },
                    "meta": {
                        "properties": {
                            "request_id": {
                                "description": "Unique identifier for the request",
                                "type": "string",
                                "example": "550e8400-e29b-41d4-a716-446655440000"
                            },
                            "timestamp": {
                                "description": "ISO 8601 timestamp of when the response was generated",
                                "type": "string",
                                "format": "date-time",
                                "example": "2023-09-15T12:34:56+00:00"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "ErrorResponse": {
                "description": "Standard error response format",
                "properties": {
                    "error": {
                        "properties": {
                            "code": {
                                "description": "Error code",
                                "type": "string",
                                "example": "validation_error"
                            },
                            "message": {
                                "description": "Human-readable error message",
                                "type": "string",
                                "example": "The provided data failed validation"
                            },
                            "details": {
                                "description": "Additional error details",
                                "type": "object",
                                "nullable": true
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "Rating": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "user_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "route_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "rating": {
                        "description": "Rating value from 1 to 5",
                        "type": "integer",
                        "example": 4
                    },
                    "comment": {
                        "type": "string",
                        "example": "Great route with beautiful views!",
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "user": {
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": 1
                            },
                            "name": {
                                "type": "string",
                                "example": "John Doe"
                            },
                            "profile_image": {
                                "type": "string",
                                "example": "users/profile1.jpg",
                                "nullable": true
                            }
                        },
                        "type": "object"
                    },
                    "route": {
                        "$ref": "#/components/schemas/Route"
                    }
                },
                "type": "object"
            },
            "GeoPoint": {
                "required": [
                    "id",
                    "route_id",
                    "latitude",
                    "longitude"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "route_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "place_id": {
                        "type": "integer",
                        "format": "int64",
                        "nullable": true
                    },
                    "latitude": {
                        "type": "number",
                        "format": "float"
                    },
                    "longitude": {
                        "type": "number",
                        "format": "float"
                    },
                    "elevation": {
                        "type": "number",
                        "format": "float",
                        "nullable": true
                    },
                    "order": {
                        "type": "integer",
                        "default": 0
                    },
                    "type": {
                        "type": "string",
                        "default": "waypoint"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    },
                    "image_path": {
                        "type": "string",
                        "nullable": true
                    },
                    "audio_path": {
                        "type": "string",
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "CursorPagination": {
                "properties": {
                    "next_cursor": {
                        "type": "string",
                        "nullable": true
                    },
                    "previous_cursor": {
                        "type": "string",
                        "nullable": true
                    },
                    "has_next": {
                        "type": "boolean"
                    },
                    "has_previous": {
                        "type": "boolean"
                    },
                    "total": {
                        "type": "integer"
                    },
                    "limit": {
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "Meta": {
                "properties": {
                    "request_id": {
                        "type": "string"
                    },
                    "timestamp": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "ApiStandardResponse": {
                "properties": {
                    "data": {
                        "description": "The main data payload",
                        "type": "object"
                    },
                    "meta": {
                        "properties": {
                            "request_id": {
                                "type": "string",
                                "example": "550e8400-e29b-41d4-a716-446655440000"
                            },
                            "timestamp": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2023-04-01T12:00:00+00:00"
                            },
                            "message": {
                                "type": "string",
                                "example": "Operation completed successfully",
                                "nullable": true
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "ApiPaginatedResponse": {
                "properties": {
                    "data": {
                        "description": "The main data payload",
                        "type": "object"
                    },
                    "pagination": {
                        "properties": {
                            "next_cursor": {
                                "type": "string",
                                "example": "eyJwb3NpdGlvbiI6MjAsImV4cGlyZXNfYXQiOiIyMDIzLTA5LTAxVDEyOjAwOjAwKzAwMDAifQ==",
                                "nullable": true
                            },
                            "previous_cursor": {
                                "type": "string",
                                "example": "eyJwb3NpdGlvbiI6MCwiZXhwaXJlc19hdCI6IjIwMjMtMDktMDFUMTI6MDA6MDArMDAwMCJ9",
                                "nullable": true
                            },
                            "has_next": {
                                "type": "boolean",
                                "example": true
                            },
                            "has_previous": {
                                "type": "boolean",
                                "example": false
                            },
                            "total": {
                                "type": "integer",
                                "example": 42
                            },
                            "limit": {
                                "type": "integer",
                                "example": 20
                            }
                        },
                        "type": "object"
                    },
                    "meta": {
                        "properties": {
                            "request_id": {
                                "type": "string",
                                "example": "550e8400-e29b-41d4-a716-446655440000"
                            },
                            "timestamp": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2023-04-01T12:00:00+00:00"
                            },
                            "message": {
                                "type": "string",
                                "example": "Data retrieved successfully",
                                "nullable": true
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "ApiErrorResponse": {
                "properties": {
                    "error": {
                        "properties": {
                            "code": {
                                "type": "string",
                                "example": "validation_error"
                            },
                            "message": {
                                "type": "string",
                                "example": "The provided data was invalid"
                            },
                            "details": {
                                "type": "object",
                                "nullable": true
                            }
                        },
                        "type": "object"
                    },
                    "meta": {
                        "properties": {
                            "request_id": {
                                "type": "string",
                                "example": "550e8400-e29b-41d4-a716-446655440000"
                            },
                            "timestamp": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2023-04-01T12:00:00+00:00"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "CursorPaginationResponse": {
                "description": "Standard cursor pagination response format",
                "properties": {
                    "pagination": {
                        "properties": {
                            "next_cursor": {
                                "description": "Opaque cursor string for the next page",
                                "type": "string",
                                "example": "ZXlKMllXeDFaU0k2TVRBd0xDSnBaQ0k2TXpBd0xDSmxlSEJwY21WelgyRjBJam9pTWpBeU5DMHdPQzB6TUZRd05qb3hOam94TlM0eU5URnZklbQ==",
                                "nullable": true
                            },
                            "previous_cursor": {
                                "description": "Opaque cursor string for the previous page",
                                "type": "string",
                                "example": "ZXlKMllXeDFaU0k2TVRBd0xDSnBaQ0k2TXpBd0xDSmxlSEJwY21WelgyRjBJam9pTWpBeU5DMHdPQzB6TUZRd05qb3hOam94TlM0eU5URnAzaQ==",
                                "nullable": true
                            },
                            "has_next": {
                                "description": "Whether there is a next page available",
                                "type": "boolean",
                                "example": true
                            },
                            "has_previous": {
                                "description": "Whether there is a previous page available",
                                "type": "boolean",
                                "example": false
                            },
                            "total": {
                                "description": "Total number of items",
                                "type": "integer",
                                "example": 50
                            },
                            "limit": {
                                "description": "Maximum items per page",
                                "type": "integer",
                                "example": 20
                            },
                            "error": {
                                "description": "Error information if there was a problem with the cursor",
                                "properties": {
                                    "code": {
                                        "description": "Error code",
                                        "type": "string",
                                        "example": "invalid_cursor"
                                    },
                                    "message": {
                                        "description": "Human-readable error message",
                                        "type": "string",
                                        "example": "The provided cursor is invalid or has expired"
                                    }
                                },
                                "type": "object",
                                "nullable": true
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "UserProfile": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "user_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "bio": {
                        "type": "string",
                        "example": "Travel enthusiast and hiking lover",
                        "nullable": true
                    },
                    "location": {
                        "type": "string",
                        "example": "New York, USA",
                        "nullable": true
                    },
                    "website": {
                        "type": "string",
                        "example": "https://example.com",
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "User": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "John Doe"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "example": "john@example.com"
                    },
                    "email_verified_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "profile": {
                        "$ref": "#/components/schemas/UserProfile"
                    }
                },
                "type": "object"
            },
            "UserUpdateRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "John Doe"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "example": "john@example.com"
                    },
                    "password": {
                        "type": "string",
                        "format": "password",
                        "example": "newpassword"
                    },
                    "password_confirmation": {
                        "type": "string",
                        "format": "password",
                        "example": "newpassword"
                    },
                    "profile": {
                        "properties": {
                            "bio": {
                                "type": "string",
                                "example": "Travel enthusiast and hiking lover"
                            },
                            "location": {
                                "type": "string",
                                "example": "New York, USA"
                            },
                            "website": {
                                "type": "string",
                                "example": "https://example.com"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            }
        },
        "responses": {
            "PaginatedResponse": {
                "description": "Paginated list of items",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/PaginatedResponse"
                        }
                    }
                }
            },
            "UnauthorizedError": {
                "description": "Authentication is required",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorResponse"
                        }
                    }
                }
            },
            "ValidationError": {
                "description": "Validation failed",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorResponse"
                        }
                    }
                }
            },
            "InvalidCursorError": {
                "description": "Invalid or expired cursor",
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "error": {
                                    "properties": {
                                        "code": {
                                            "type": "string",
                                            "example": "invalid_cursor"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "The provided cursor is invalid or has expired. Please restart from the beginning."
                                        },
                                        "details": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            }
        },
        "parameters": {
            "cursor": {
                "name": "cursor",
                "in": "query",
                "description": "Opaque cursor string for pagination. For forward pagination, use the next_cursor from previous response. For backend pagination, use the previous_cursor.",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "limit": {
                "name": "limit",
                "in": "query",
                "description": "Number of items per page (default: 20, max: 100)",
                "required": false,
                "schema": {
                    "type": "integer",
                    "default": 20,
                    "maximum": 100,
                    "minimum": 1
                }
            },
            "direction": {
                "name": "direction",
                "in": "query",
                "description": "Pagination direction. Use 'forward' for getting the next page, 'backend' for returning to previous pages.",
                "required": false,
                "schema": {
                    "type": "string",
                    "default": "forward",
                    "enum": [
                        "forward",
                        "backend"
                    ]
                }
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "bearerFormat": "JWT",
                "scheme": "bearer"
            },
            "sanctum": {
                "type": "apiKey",
                "description": "Enter token in format (Bearer <token>)",
                "name": "Authorization",
                "in": "header"
            }
        }
    },
    "tags": [
        {
            "name": "Authentication",
            "description": "API Endpoints for user authentication"
        },
        {
            "name": "Categories",
            "description": "API Endpoints for travel categories"
        },
        {
            "name": "Countries",
            "description": "API Endpoints for countries"
        },
        {
            "name": "Cities",
            "description": "API Endpoints for cities"
        },
        {
            "name": "Routes",
            "description": "API Endpoints for travel routes"
        },
        {
            "name": "Places",
            "description": "API Endpoints for places"
        },
        {
            "name": "Search",
            "description": "API Endpoints for search functionality"
        },
        {
            "name": "User",
            "description": "API Endpoints for user operations"
        },
        {
            "name": "Favorites",
            "description": "API Endpoints for user favorites"
        },
        {
            "name": "Ratings",
            "description": "API Endpoints for user ratings"
        },
        {
            "name": "Geo Points",
            "description": "Geo Points"
        }
    ],
    "security": [
        {
            "sanctum": []
        }
    ]
}