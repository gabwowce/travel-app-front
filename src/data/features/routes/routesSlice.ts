import { createSlice, createAsyncThunk, PayloadAction } from "@reduxjs/toolkit";
import { getFilteredRoutes, getFeaturedRoutes, getRouteById, getRoutesByCategory, getRoutesByCity } from "@/src/data/features/routes/routesAPI";
import { Route, RouteQueryParams, PaginatedRoutesResponse } from "@/src/data/features/routes/routesTypes";

// Pradinƒó b≈´senos reik≈°mƒó
interface RoutesState {
  routes: Route[];
  featuredRoutes: Route[];
  selectedRoute: Route | null;
  loading: boolean;
  error: any | null;
}

const initialState: RoutesState = {
  routes: [],
  featuredRoutes: [],
  selectedRoute: null,
  loading: false,
  error: null,
};

// ‚úÖ Gauti visus mar≈°rutus su filtrais
export const fetchRoutes = createAsyncThunk("routes/fetchRoutes", async (params: RouteQueryParams, thunkAPI) => {
  try {
    return await getFilteredRoutes(params);
  } catch (error: any) {
    return thunkAPI.rejectWithValue(error.message || "Nepavyko gauti mar≈°rut≈≥");
  }
});

// ‚úÖ Gauti rekomenduojamus mar≈°rutus
export const fetchFeaturedRoutes = createAsyncThunk("routes/fetchFeaturedRoutes", async (_, thunkAPI) => {
    try {
      const response = await getFeaturedRoutes();
      return response;
    } catch (error: any) {
      return thunkAPI.rejectWithValue(error.message || "Nepavyko gauti rekomenduojam≈≥ mar≈°rut≈≥");
    }
  });
  

// ‚úÖ Gauti vienƒÖ mar≈°rutƒÖ pagal ID
export const fetchRouteById = createAsyncThunk("routes/fetchRouteById", async (id: number, thunkAPI) => {
  try {
    return await getRouteById(id);
  } catch (error: any) {
    return thunkAPI.rejectWithValue(error.message || "Nepavyko gauti mar≈°ruto detali≈≥");
  }
});

// ‚úÖ Filtruoti mar≈°rutus pagal kategorijƒÖ i≈° serverio
export const fetchRoutesByCategory = createAsyncThunk(
  "routes/fetchRoutesByCategory",
  async (categoryId: number, thunkAPI) => {
    try {
      return await getRoutesByCategory(categoryId);
    } catch (error: any) {
      return thunkAPI.rejectWithValue(error.message || "Nepavyko gauti mar≈°rut≈≥ pagal kategorijƒÖ");
    }
  }
);

// ‚úÖ Filtruoti mar≈°rutus pagal miestƒÖ i≈° serverio
export const fetchRoutesByCity = createAsyncThunk(
  "routes/fetchRoutesByCity",
  async (cityId: number, thunkAPI) => {
    try {
      return await getRoutesByCity(cityId);
    } catch (error: any) {
      return thunkAPI.rejectWithValue(error.message || "Nepavyko gauti mar≈°rut≈≥ pagal miestƒÖ");
    }
  }
);


const routesSlice = createSlice({
    name: "routes",
    initialState,
    reducers: {},
    extraReducers: (builder) => {
      builder
        .addCase(fetchFeaturedRoutes.pending, (state) => {
          state.loading = true;
        })
        .addCase(fetchFeaturedRoutes.fulfilled, (state, action) => {
          state.loading = false;
          state.featuredRoutes = action.payload;
          console.log("üåç Stored featured routes:", state.featuredRoutes); // <-- Debug Redux store
        })
        .addCase(fetchFeaturedRoutes.rejected, (state, action) => {
          state.loading = false;
          state.error = action.payload;
        })
        .addCase(fetchRoutes.pending, (state) => { state.loading = true; })
        .addCase(fetchRoutes.fulfilled, (state, action: PayloadAction<PaginatedRoutesResponse>) => {
          state.loading = false;
          state.routes = action.payload.items;
        })
        .addCase(fetchRoutes.rejected, (state, action) => {
          state.loading = false;
          state.error = action.payload as string;
        })
        
        // ‚úÖ Pridƒóta logika `fetchRouteById`, kad ƒØra≈°yt≈≥ ƒØ `selectedRoute`
        .addCase(fetchRouteById.pending, (state) => {
          state.loading = true;
          state.selectedRoute = null;
          state.error = null;
        })
        .addCase(fetchRouteById.fulfilled, (state, action: PayloadAction<Route>) => {
          state.loading = false;
          state.selectedRoute = action.payload;
        })
        .addCase(fetchRouteById.rejected, (state, action) => {
          state.loading = false;
          state.error = action.payload as string;
          state.selectedRoute = null;
        })
        // Kategorij≈≥ filtravimas
        .addCase(fetchRoutesByCategory.pending, (state) => {
          state.loading = true;
        })
        .addCase(fetchRoutesByCategory.fulfilled, (state, action: PayloadAction<PaginatedRoutesResponse>) => {
          state.loading = false;
          state.routes = action.payload.items; // üîπ Perra≈°ome tik reikiamus mar≈°rutus
        })
        .addCase(fetchRoutesByCategory.rejected, (state, action) => {
          state.loading = false;
          state.error = action.payload as string;
        })

        // Miest≈≥ filtravimas
        .addCase(fetchRoutesByCity.pending, (state) => {
          state.loading = true;
        })
        .addCase(fetchRoutesByCity.fulfilled, (state, action: PayloadAction<PaginatedRoutesResponse>) => {
          state.loading = false;
          state.routes = action.payload.items;
        })
        .addCase(fetchRoutesByCity.rejected, (state, action) => {
          state.loading = false;
          state.error = action.payload as string;
        });
    },
  });
  
  

export default routesSlice.reducer;
